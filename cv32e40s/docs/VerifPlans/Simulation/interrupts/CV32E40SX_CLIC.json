[
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Reset behavior",
        "Sub Feature": "CSR reset value",
        "Feature Description": "mintstatus.mil resets to 0",
        "Verification Goal": "CSR value check after reset\n\nDo not implement in initial-block to include formal checking",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mintstatus_mil_reset_to_zero"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Reset behavior",
        "Sub Feature": "CSR reset value",
        "Feature Description": "mstatus.mie resets to 0\n",
        "Verification Goal": "CSR value check after reset\n\nDo not implement in initial-block to include formal checking",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mstatus_mie_reset_to_zero"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Reset behavior",
        "Sub Feature": "CSR reset value",
        "Feature Description": "mtvec resets to {mtvec_addr_i[31:7]. 5'b0_0000, 2'b11}",
        "Verification Goal": "Assert that mtvec resets to the correct initialization value",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mtvec_reset_value_correct"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Reset behavior",
        "Sub Feature": "Interrupts never enabled out of reset",
        "Feature Description": "mstatus.mie resets to 0",
        "Verification Goal": "Assert that interrupts are disabled and never taken immediately after deasserting reset",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mstatus_mie_reset_to_zero\na_irq_ack_valid\na_no_irq_no_ack"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Constraints",
        "Sub Feature": "Privilege Modes",
        "Feature Description": "CLIC interrupts only support machine mode",
        "Verification Goal": "Assert that clic_irq_priv_i[1:0] is always  2'b11\nAssume on input for formal",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_clic_mode_only"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Constraints",
        "Sub Feature": "NMI",
        "Feature Description": "NMI address is located at the 15th entry in the machine trap vector table, located at mtvec. In other words, nmi_addr = { mtvec[31:7], 5'b0_1111, 2'b00 }",
        "Verification Goal": "Assert that nmi addr = { mtvec[31:7], 5'b0_1111, 2'b00 }",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_nmi_to_mtvec_offset"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Constraints",
        "Sub Feature": "Interrupts",
        "Feature Description": "Support up to a maximum of 1024 CLIC interrupts",
        "Verification Goal": "Assert that SMCLIC_ID_WIDTH is inside { 1 .. 10 }",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_clic_valid_setting"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Constraints",
        "Sub Feature": "Interrupts",
        "Feature Description": "Interrupt levels inside { 0 .. 255 }",
        "Verification Goal": "Correct functionality of interrupts of all valid levels",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "clic_cg.cp_lvl"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Constraints",
        "Sub Feature": "Input ports",
        "Feature Description": "irq_i[31:0] tied to zero",
        "Verification Goal": "Assert that non-clic irq[31:0] signals are tied to 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_tieoff_zero_irq_i"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Eventually taken",
        "Sub Feature": "Interrupt taken",
        "Feature Description": "An interrupt that is both pending and enabled shall be taken, unless if the core is in debug mode or is blocked by external interfaces (rvalid, fence_flush_ack, etc), and the taking happens within a fixed number of cycles",
        "Verification Goal": "Check that when conditions are right, then the interrupt gets taken within expected time",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Waived on top level verification due to lack of visibility and precise specification of what prevents interrupts from being taken, and there exist no definite bound. \n\nDesign assertion:\nCore_i.gen_clic_interrupt.clic_int_controller_i.clic_int_controller.sva.a_clic_enable"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Interrupt interface",
        "Sub Feature": "Level sensitive",
        "Feature Description": "All interrupt lines are level-sensitive",
        "Verification Goal": "All assertions and modeling of interrupts for checking assume no edges required to qualify an interrupt",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt interface",
        "Sub Feature": "Interrupt ack pulse",
        "Feature Description": "Interrupt acknowledge is always a pulse",
        "Verification Goal": "Assert that irq_ack is always a pulse",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_irq_ack_is_always_single_cycle_pulse"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt interface",
        "Sub Feature": "Interrupt ack valid",
        "Feature Description": "Interrupt acknowledge is only asserted when a valid interrupt has been taken by the core",
        "Verification Goal": "irq_ack never asserted unless core has taken an interrupt",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_irq_ack_valid\na_no_irq_no_ack"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt interface",
        "Sub Feature": "NMI",
        "Feature Description": "NMI not reported on irq_ack",
        "Verification Goal": "Check that after an NMI is triggered, if there is no other interrupt occuring, then there should be no irq_ack",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Waived - Ideally would like to have an assertion for this case, but it is not possible to separate cases on rvfi where the taken interrupts handler is interrupted by nmi, and thus appears to have an ack caused by nmi. \n\na_no_irq_no_ack should suffice to prove that we do not take an interrupt without an actual pending interrupt."
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Interrupt ID is valid",
        "Feature Description": "Interrupt valid ID matches the active interrupt during the cycle where interrupt acknowledge is asserted",
        "Verification Goal": "Ensure that irq_id is the active interrupt when irq_ack is asserted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mintstatus_updated_on_isr_handler_entry"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Interrupt ID is never reserved",
        "Feature Description": "Interrupt valid ID during interrupt acknowledge is never a reserved interrupt [15,14,13,12,10,9,8,6,5,4,2,1,0]",
        "Verification Goal": "Assert irq_id is not a reserved valid when irq_ack is asserted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "This is not a CLIC requirement"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt Interface",
        "Sub Feature": "Single interrupt ack per ISR",
        "Feature Description": "Interrupt acknowledge only asserted once per interrupt",
        "Verification Goal": "irq_ack only asserts once for an interrupt service period",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Implied proof by\n\na_irq_ack_is_always_single_cycle_pulse (single pulse only) +\na_irq_ack_valid (must be higher priority and enabled) +\na_no_irq_no_ack (must never happen unless higher pri and enabled)"
    },
    {
        "Requirement Location": "Silabs internal",
        "Feature": "Interrupt interface",
        "Sub Feature": "RVFI",
        "Feature Description": "Every irq_ack must be followed by a corresponding rvfi_intr",
        "Verification Goal": "Check that whenever and irq_ack occurs, then the next rvfi retired instruction must have rvfi interrupt set correctly",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_every_ack_followed_by_rvfi_intr"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mclicbase",
        "Feature Description": "12 least significant bits hardwired to zero",
        "Verification Goal": "Assert mclicbase[11:0] = 0 \n\nNote: This register will possibly be removed in the future",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "functional Coverage",
        "Link to Coverage": "Outdated req, CSR removed"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mstatus.mpp",
        "Feature Description": "mstatus.mpp accessible through mcause.mpp",
        "Verification Goal": "Read/Write mpp to mcause.mpp and read back through mstatus.mpp",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: w_mcause_mpp_r_mstatus_mpp\nclic :: w_mstatus_mpp_r_mcause_mpp"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause.mpp",
        "Feature Description": "mcause.mpp accessible through mstatus.mpp",
        "Verification Goal": "Read/Write mpp to mstatus.mpp and read back through mcause.mpp",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: w_mcause_mpp_r_mstatus_mpp\nclic :: w_mstatus_mpp_r_mcause_mpp"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mstatus.mpie",
        "Feature Description": "mstatus.mpie accessible through mcause.mpie",
        "Verification Goal": "Read/Write mpp to mcause.mpie and read back through mstatus.mpie",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: w_mcause_mpie_r_mstatus_mpie\nclic :: w_mstatus_mpie_r_mcause_mpie"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause.mpie",
        "Feature Description": "mcause.mpie accessible through mstatus.mpie",
        "Verification Goal": "Read/Write mpp to mstatus.mpie and read back through mcause.mpie",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: w_mcause_mpie_r_mstatus_mpie\nclic :: w_mstatus_mpie_r_mcause_mpie"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mie",
        "Feature Description": "mie not used and hardwired to zero",
        "Verification Goal": "Assert that mie always appears as hardwired 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mie_unused_hardcode_zero"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mie",
        "Feature Description": "Writes to mie should not trap",
        "Verification Goal": "Attempt writes to mie and ensure that 0 is read back",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "w_mie_notrap_r_zero"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mip",
        "Feature Description": "mip not used and hardwired to zero",
        "Verification Goal": "Assert that mip always appears as hardwired 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mip_unused_hardcode_zero"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mip",
        "Feature Description": "Writes should not trap",
        "Verification Goal": "Attempt writes to mip and ensure that 0 is read back",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "w_mip_notrap_r_zero"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mtvec",
        "Feature Description": "Always aligned to 128 bytes",
        "Verification Goal": "Assert that mtvec[6:2] always zero",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mtvec_aligned_to_128_bytes"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mtvec",
        "Feature Description": "Always in CLIC mode (I.e. model can not switch between interrupt modes)",
        "Verification Goal": "Assert that mtvec.mode is always 2'b11 when CLIC is enabled",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mtvec_mode_always_clic"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mtvt",
        "Feature Description": "Memory writes to the vector table require an instruction barrier (fence.i) to guarantee that they are visible to the instruction fetch.",
        "Verification Goal": "Verify that a fence.i instruction after writes to the vector table guarantees that the new vector table pointer taken matches the latest pointer written to the vector table.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_fencei_guarantee_visible_mtvt_write"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mtvt",
        "Feature Description": "Function ptr reads treated as instruction fetch, adhering to configured PMA settings \n(CV32E40S): PMP settings apply as for any other instruction fetch",
        "Verification Goal": "Assert that interrupts accessing the vector table pointers do so through the instruction interface, and that a lack of PMP execute and PMA main-memory settings causes the instruction fetch to fail.\n\nNote, instruction fetch is treated as an implicit read, thus do not require PMP read permissions, but execute permission is required.\n\nBoth the pointer fetch and the fetch of the actual instruction located at the pointer address should be covered by the above restrictions. ",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "clic::invalid_mtvt_ptr_exec_mret, minhv_pma_block.c"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mtvt",
        "Feature Description": "Always aligned to 2^(max(6, 2+SMCLIC_ID_WIDTH)",
        "Verification Goal": "Assert that mtvt [max(6, 2+SMCLIC_ID_WIDTH)-1:0] = 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mtvt_alignment_correct"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mtvt",
        "Feature Description": "Determine alignment by software access,\nWrite ones to lower order bits and read back",
        "Verification Goal": "Test that correct alignment can be inferred by writing to these fields and read back.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: w_mtvt_rd_alignment"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mepc",
        "Feature Description": "The CSR\u00a0mepc\u00a0is set to the PC of the interrupted application code or preempted interrupt handler",
        "Verification Goal": "Ensure that MEPC in ISR is value of saved PC.\n",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mepc_set_correct_after_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause",
        "Feature Description": "mcause.interrupt flag always set during ISR regardless of the active interrupt",
        "Verification Goal": "mcause[31] is set when an interrupt is taken",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mcause_interupt_always_set_on_taken_irq"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause",
        "Feature Description": "mcause.exccode is set to the active interrupt code",
        "Verification Goal": "mcause.exccode reflects the taken interrupt",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mcause_exccode_always_set_correctly_on_taken_irq"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause",
        "Feature Description": "mcause.mpil: Previous interrupt level",
        "Verification Goal": "mpil reflects the previous privilege level",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mcause_mpil_reflects_previous_interrupt_lvl"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause",
        "Feature Description": "mcause.mpp: Previous privilege mode",
        "Verification Goal": "Ensure that mcause.mpp reflects mstatus.mpp previous privilege mode after taking a trap",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mcause_mpp_reflects_previous_privilege_mode"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mcause",
        "Feature Description": "mcause.mpie: Previous interrupt enable",
        "Verification Goal": "Ensure that mcause.mpie reflects mstatus.mpie previous interrupt enable value after taking a trap",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mcause_mpie_reflects_previous_interrupt_enable"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mnxti",
        "Feature Description": "mnxti read value after ISR is entered:\n\nCase 1:\n\"The II is still the ranking interrupt (no change). In this case, as the level of the II will still be higher than pil from the OIC, xil and exccode will be rewritten with the same value that they already had (effectively unchanged), and xnxti will return the table entry for the II.\"\n\n(II: Initital interrupt,\nOIC: Original interrupted context)",
        "Verification Goal": "Assert that mnxti returns the table entry for the initial interrupt when the current interrupt is still being signalled to the core as the highest enabled and pending interrupt.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mnxti_case_1_irq_req_unchanged"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mnxti",
        "Feature Description": "mnxti read value after ISR is entered:\n\nCase 2:\n\"The II has been superceded by a higher-level non-SHV interrupt. In this case, xil will be set to the new higher interrupt level, exccode will be updated to the new interrupt id, and xnxti will return the vector table entry for the new higher-level interrupt. The OIC is not disturbed, retaining the original epc and the original pil. This case reduces latency to service a more-important interrupt that arrives after the state-save sequence was begun for the less-important II. The II, if still pending-enabled, will be serviced sometime after the higher-level interrupt as described below.\"",
        "Verification Goal": "Assert that mnxti returns the table entry for the new higher-level interrupt when the current interrupt is being interrupted by a higher level, non-shv interrupt",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mnxti_case_2_replaced_by_higher_level_non_shv_irq"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mnxti",
        "Feature Description": "mnxti read value after ISR is entered:\n\nCase 3: \n\"The II has been superceded by a higher-priority non-SHV interrupt at the same level. This operates similarly to the previous case, with exccode updated to the new interrupt id. Because the lower-priority interrupt had not begun to run its service routine, this optimization preserves the property that interrupt handlers at the same interrupt level but different priorities execute atomically with respect to each other (i.e., they do not preempt each other).\"",
        "Verification Goal": "Only machine mode interrupts are supported, an interrupt of the same level but higher priority cannot occur\n",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A - cannot take assertions in U-mode"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mnxti",
        "Feature Description": "mnxti read value after ISR is entered:\n\nCase 4:\n\"The II has disappeared and a lower-ranked non-SHV interrupt, which has interrupt level greater than the OIC\u2019s pil is present in CLIC. In this case, the xil of the handler will be reduced to the lower-ranked interrupt\u2019s level, exccode will be updated with the new interrupt id, and xnxti will return a pointer to the appropriate handler in table. In this case, the new lower-ranked interrupt would still have caused the original context to have been interrupted to run the handler, and the disappearing II has simply caused the lower-ranked interrupt\u2019s entry and state-save sequence to begin earlier.\"",
        "Verification Goal": "Assert that mnxti returns the table entry for the new lower-level interrupt when the current interrupt is no longer present in the CLIC, and replaced by a new lower-leveled interrupt, with a greater interrupt level than the original interrupted context's pil",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mnxti_case_4_replaced_by_lower_level_irq"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mnxti",
        "Feature Description": "mnxti read value after ISR is entered:\n\nCase 5:\n\"The II has disappeared and either there is no current interrupt from the CLIC, or the current ranking interrupt is a non-SHV interrupt with level lower than xpil. In this case, the xil and exccode are not updated, and 0 is returned by xnxti. The following trampoline code will then not fetch a vector from the table, and instead just restore the OIC context and mret back to it. This preserves the property that the OIC completes execution before servicing any new interrupt with a lower or equal interrupt level.\"",
        "Verification Goal": "Ensure that mnxti returns 0 in case the initial interrupt is no longer signalled, nor replaced by a new interrupt from the CLIC",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mnxti_case_5_1_no_current_irq\na_mnxti_case_5_2_lvl_nonshv_pending"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mnxti",
        "Feature Description": "mnxti read value after ISR is entered:\n\nCase 6:\n\"The II has been superceded by a higher-level SHV interrupt. In this case, the xil and exccode are not updated, and 0 is returned by xnxti. Once interrupts are reenabled for the following instruction, the hart will preempt the current handler and execute the vectored interrupt at a higher interrupt level using the function pointer stored in the vector table.\"",
        "Verification Goal": "Assert that mnxti will return 0 in case of a higher-leveled SHV interrupt pending",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mnxti_case_6_higher_level_irq_superceed"
    },
    {
        "Requirement Location": "UM v0.9.0 Common",
        "Feature": "Interrupt CSR",
        "Sub Feature": "mintstatus",
        "Feature Description": "R/O CSR, Holds active interrupt level for each supported privilege mode",
        "Verification Goal": "Assert that the mil field gets updated with the current interrupt level when an interrupt is taken, and that sil and uil-fields are hard-coded zero.\n\nNote: NMIs explicitly leave \"mintstatus\" unchanged.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mintstatus_updated_on_isr_handler_entry"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "CSR",
        "Sub Feature": "CSR access",
        "Feature Description": "CSR registers should be accessible as defined in UM",
        "Verification Goal": "Add new CLIC-specific registers to CSR access tests and ensure that the registers and their fields can be read/written according to specification\n\nmtvt\nmnxti\nmintstatus\nmintthresh\nmscratchcsw\nmscratchcswl\n\nNote: \"mclicbase\" was removed.\nNote: \"mintstatus\" got moved.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: r_mnxti_without_irq\nclic :: rw_mnxti_without_irq_legal\nclic :: r_mnxti_with_pending_irq\nclic :: r_mnxti_with_lower_lvl_pending_irq\nclic :: w_mnxti_side_effects\nclic :: rw_mscratchcsw\nclic :: rw_mscratchcsw_illegal\nclic :: rw_mscratchcswl\nclic :: rw_mscratchcswl_illegal\n\nmintthresh write implicitly tested by \nclic :: mintthresh_higher\nclic :: mintthresh_equal\nclic :: mintthresh_lower\nand compared with ISS\n\nmintstatus read implicitly tested by\nclic :: w_mnxti_side_effects"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "Hardware vectoring",
        "Feature Description": "mcause.minhv: Set at start of hw vectoring",
        "Verification Goal": "Assert that mcause.minhv is set when a hw-vectored interrupt is taken",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_mcause_minhv_set_at_failing_ptr_fetch\na_mcause_minhv_set_valid\na_mcause_minhv_clear_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt CSR",
        "Sub Feature": "Hardware vectoring",
        "Feature Description": "mcause.minhv: Cleared at end of hw vectoring",
        "Verification Goal": "Assert that mcause.minhv is cleared when pointer fetch of hw-vectored interrupt is taken successfully",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Waived - Outdated requirement"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Hardware vectoring",
        "Feature Description": "Exception on fetch:\nmepc : set to faulting address (pointer, rather than address for an instruction)\nmcause: exception type",
        "Verification Goal": "Write invalid (not pointing to a valid instruction or a region with pmp restricted execute access) pointer to the mtvt table, and trigger this handler. \n",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "clic :: invalid_mtvt_ptr_exec"
    },
    {
        "Requirement Location": "Silabs Internal",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Hardware vectoring",
        "Feature Description": "Prefetcher: no prefetches between pointer fetch and fetch of final vectored target",
        "Verification Goal": "Assert that no new instructions get fetched that does not match the final vectored target after a pointer fetch is attempted",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Waived - No RVFI visibility"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Hardware vectoring",
        "Feature Description": "Interrupt executes trap handler function pointer located at the address specified in mtvt when shv = 1",
        "Verification Goal": "Assert that first pc after a taken, shv interrupt always matches address fetched from mtvt\n",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_pc_to_mtvt_for_taken_shv_interrupt_outstanding_obi\na_pc_to_mtvt_for_taken_shv_interrupt"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt Vector",
        "Sub Feature": "Hardware vectoring",
        "Feature Description": "Interrupt jumps to common code at mtvec when shv = 0",
        "Verification Goal": "Assert that first pc after a taken non-shv interrupt matches ",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_pc_to_mtvec_for_taken_nonshv_interrupt"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Interrupt Vector",
        "Sub Feature": "PC",
        "Feature Description": "non-shv: taken trap handler always has address[6:0] = 0;\nimplied by mtvec alignment restriction",
        "Verification Goal": "Assert that first pc after a taken, non-shv interrupt always has bits [6:0] = 0\n",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_pc_alignment_of_taken_non_shv_interrupt"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Interrupts ignored",
        "Feature Description": "Interrupts ignored when \nnew privilege mode (nP) lower than current privilege mode (P)",
        "Verification Goal": "Not allowed, assuming clic_irq_priv_i always = 2'b11\nCovered by assertion that asserts that clic_irq_priv_i is always 2'b11 in sim and assumed in formal",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A - cannot take assertions in U-mode"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Interrupts ignored",
        "Feature Description": "Interrupts ignored when \nnew privilege mode (nP) = current privilege mode(P) and new interrupt level (nL) != 0 and nL < current interrupt level (L)",
        "Verification Goal": "During constrained random testing, the following should be true\n\nCurrent privilege mode: M-mode\nInside interrupt handler (Nested)\n\nclic_irq_i = 1\nclic_irq_id_i = random 0 .. max_index\nclic_irq_lvl > 0 and < current level\nclic_irq_priv_i = 2'b11 assumed always true\nclic_irq_shv_i = random 0 .. 1\n\nCheck that no inadvertent state/register change occurs from a pending, enabled but not taken interrupt",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_no_irq_no_ack"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Interupts disabled",
        "Feature Description": "Interrupts disabled when\nmtatus.mie and clicintie[i] = 0",
        "Verification Goal": "mstatus.mie = 0 should disallow any pending and enabled interrupts from being taken as we only have one level where interrupts can be taken (M-mode), so no other higher modes exist\n\nCheck that no inadvertent state/register change occurs from a pending, enabled but not taken interrupt",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "clicintie is external to core, only mstatus.mie fans in to core assertions/tests\n\na_no_irq_no_ack"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "No interrupt",
        "Feature Description": "No interrupt when \nnew privilege mode (nP) = current privilege mode (P) \nclic.level = 0\n\nP, nP in M, U",
        "Verification Goal": "During constrained random testing, the following should be true\n\nCurrent privilege mode: M-mode (Cannot signal U-mode)\nTest in both nested and non-nested cases\n\nclic_irq_i = 1 \nclic_irq_id_i = random 0 .. max index\nclic_irq_lvl = 0\nclic_irq_priv_i = 2'b11 assumed always true\nclic_irq_shv_i = random 0 .. 1\n\nCheck that no inadvertent state/register change occurs from a pending, enabled but not taken interrupt",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_no_irq_no_ack"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "No interrupt",
        "Feature Description": "No interrupt when \nnew privilege mode (nP) > current privilege mode (P)\nclic.level = 0\n\nnP = M, P = U, clic.level = 0\n(CV32E40S)",
        "Verification Goal": "During constrained random testing, the following should be true\n\nCurrent privilege mode: U-mode\nTest for both nested and non-nested cases\n\nclic_irq_i = 1\nclic_irq_id_i = random 0 .. max_index\nclic_irq_lvl = 0\nclic_irq_priv_i = 2'b11 assumed always true\nclic_irq_shv_i = random 0 .. 1\n\nCheck that no inadvertent state/register change occurs from a pending, enabled but not taken interrupt",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_no_irq_no_ack"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Horizontal interrupt taken\n(Nested)",
        "Feature Description": "Horizontal interrupt taken when\nmtatus.mie and clicintie[i] = 1\nnew privilege mode (nP) = current privilege mode (P)\nnew privilege level (nL) > current privilege level (L)\n\nOnly applicable for M-mode (P, nP = M) as horizontal user mode traps are not supported (N-extension) in neither CV32E40X nor S",
        "Verification Goal": "During constrained random testing, the following should be true\n\nCurrent privilege mode: M-mode (Cannot signal U-mode)\n\nclic_irq_i = 1\nclic_irq_id_i = random 0 .. max_index\nclic_lvl > current_lvl\nclic_irq_priv_i = 2'b11 assumed always true\nclic_irq_shv_i = random 0 .. 1\n\nCheck that an interrupt that should be taken under the given circumstances always get taken\nCheck that system behaves correctly when a pending and enabled interrupt gets taken",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_irq_ack_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Vertical interrupt taken",
        "Feature Description": "Vertical interrupt taken when\nnew privilege mode (nP) > current privilege mode (P)\nnew privilege level (nL) > 0\n\nnP = M, P = U\n\n(CV32E40S)",
        "Verification Goal": "During constrained random testing, the following should be true\n\nCurrent privilege mode: U-mode\n\nclic_irq_i = 1\nclic_irq_id_i = random 0 .. max_index\nclic_lvl > 0\nclic_irq_priv_i = 2'b11 assumed always true\nclic_irq_shv_i = random 0 .. 1\n\nCheck that an interrupt that should be taken under the given circumstances always gets taken\nCheck that the system behaves correctly when a pending and enabled interrupt gets taken",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_irq_ack_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt arbitration",
        "Sub Feature": "Interrupt taken",
        "Feature Description": "mstatus.mie = 1\nnP = P = M\nnL > L\n\nor\n\nnP > P (i.e. nP = M, P = U)\nnL > 0",
        "Verification Goal": "Assert that an interrupt is taken if and only if any of the two conditions are true",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "a_irq_ack_valid\na_no_irq_no_ack"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt preemption",
        "Sub Feature": "mintthresh",
        "Feature Description": "Higher level interrupts than mintthresh.th can preempt execution",
        "Verification Goal": "Assert that interrupts with the same privilege mode and higher privilege level than the running ISR can interrupt the currently running ISR",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "a_higher_lvl_than_mintthresh_th_can_preempt"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Interrupt preemption",
        "Sub Feature": "mintthresh",
        "Feature Description": "Lower level interrupts than mintthresh.th cannot preempt execution",
        "Verification Goal": "Assert that interrupts with the same privilege mode and lower privilege level than the running ISR cannot interrupt the currently running ISR",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "a_lower_lvl_than_mintthresh_th_cannot_preempt"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI resume",
        "Sub Feature": "Resumes",
        "Feature Description": "when \nnP > P\ninterrupt is highest among pending-and-enabled interrupts\ni.level != 0\n\nnP = M, P = U\n\n(CV32E40S)",
        "Verification Goal": "clic_irq_i = 1\nclic_irq_lvl > 0\nP = U\nnP = M",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI resume",
        "Sub Feature": "Resumes",
        "Feature Description": "when\nnP = P\ninterrupt is highest among pending-and-enabled interrupts\ni.level > max(xintstatus.xil, xintthresh.th)\n\n(xintthresh only applies to current privilege mode)\nnP, P = M",
        "Verification Goal": "clic_irq_i = 1\nclic_irq_lvl > max(mintstatus.mil, mintthresh.th)\nP, nP = M\n\nTest that only interrupts with a sufficiently high interrupt level are able to preempt execution with both true or temporarily risen interrupt level",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI resume",
        "Sub Feature": "Resumes",
        "Feature Description": "nP < P\ninterrupt is highest among pending-and-enabled interrupts\ni.level != 0\n\nCan not occur 40S/40X as new privilege mode signalled on the CLIC interface can never be less than current privilege mode",
        "Verification Goal": "nP < P cannot occur as we assume clic_irq_lvl = 2'b11\n\nNo test/assertion applicable, should be covered by clic_irq_lvl assertion ensuring that an interrupt with irq_lvl != 2'b11 never occurs",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI resume",
        "Sub Feature": "Ignores",
        "Feature Description": "Everything not covered above",
        "Verification Goal": "Core does not resume operation unless any of the above resume conditions are true",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_not_valid"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Killed instructions have no side-effects",
        "Feature Description": "When an instruction is interrupted, it is killed, meaning that it has no side-effects: 1) load/store instructions don't reach the bus, 2) control transfer instructions don't jump, 3) CSRs don't get updated, 4) GPRs don't get updated",
        "Verification Goal": "Check that bus, jumps, and registers are unaffected by killed instructions",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Return from handler",
        "Sub Feature": "mret",
        "Feature Description": "Execution continues at \nPrivilege mode = mcause.mpp\npc = mepc\ninterrupt level = mcause.mpil\nglobal interrupt enable mie = mcause.mpie\n\nmcause.mpil unchanged\nmcause.mpp = least privileged mode\nmcause.mpie = 1",
        "Verification Goal": "Correct update of CSR values when core returns from an ISR",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Covered by assertions below"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Return from handler",
        "Sub Feature": "mret",
        "Feature Description": "Execution continues at \nP = mcause.mpp\npc = mepc\nL = mcause.mpil\nie = mcause.mpie\n\nmcause.mpil unchanged\nmcause.mpp = least privileged mode\nmcause.mpie = 1",
        "Verification Goal": "Correct update of CSR values when core returns from an ISR\nAdded assertion for formal coverage",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.clic_assert_i.gen_clic_assertions.a_mret_pc_intended,\n[clic_assert].a_mret_pc_not_vectored, \n[clic_assert].a_mret_mode_mpp, \n[clic_assert].a_mret_mil_mpil, \n[clic_assert].a_mret_mil_mpil_intended, \n[clic_assert].a_mret_mie_mpie"
    },
    {
        "Requirement Location": "CLIC 0.9-draft 4/11/2023",
        "Feature": "Return from handler",
        "Sub Feature": "mret",
        "Feature Description": "\"If the hart is currently running at some privilege mode x, an MRET or SRET instruction that changes the privilege mode to a mode less privileged than x also sets xintthresh = 0.\"",
        "Verification Goal": "Use \"mret\" to enter U-mode.\nCheck that \"mintthresh\" is written to zero upon executing the mret.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.clic_assert_i.gen_clic_assertions.a_mret_umode_clear_mintthresh"
    },
    {
        "Requirement Location": "CLIC 0.9-draft 12/19/2023",
        "Feature": "Return from handler",
        "Sub Feature": "mret minhv=1",
        "Feature Description": "\"If the xinhv bit is set, the hart resumes the trap handler memory access to retrieve the function pointer for vectoring with permissions corresponding to the previous privilege mode. The trap handler function address is obtained from the current privilege mode\u2019s xepc with the low bits of the address cleared to force the access to be naturally aligned to an XLEN/8-byte table entry.\"",
        "Verification Goal": "Run mret when minhv is set. Check that the next instruction to be executed is the address pointed to by the mepc, and check that mepc gets naturally aligned to XLEN/8 byte.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: clic :: mret_with_minhv\nclic ::mret_with_minhv_and_unaligned_mepc"
    },
    {
        "Requirement Location": "CLIC 0.9-draft 4/11/2023",
        "Feature": "Return from debug mode",
        "Sub Feature": "dret",
        "Feature Description": "\"Likewise, if the RISC-V debug specification is implemented and the hart is currently running at some privilege mode x, a DRET instruction that changes the privilege mode to a mode less privileged than x also sets xintthresh = 0.\"",
        "Verification Goal": "Use \"dret\" to enter U-mode.\nCheck that \"mintthresh\" is written to zero upon executing the dret.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "Requirement removed"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI",
        "Sub Feature": "Wakeup conditions",
        "Feature Description": "A pending-and-enabled interrupt i causes the hart to resume execution if interrupt i\n\u2022 has a higher privilege mode than the current privilege mode and\n\u2022 the interrupt priority reduction tree selects interrupt i as the maximum across all pending-and-enabled\ninterrupts and\n\u2022 the interrupt i level is not equal to 0.",
        "Verification Goal": "Test that interrupts of higher privilege modes than the current privilege mode can wakeup the core from wfi",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI",
        "Sub Feature": "Wakeup conditions",
        "Feature Description": "A pending-and-enabled interrupt i causes the hart to resume execution if interrupt i\n \u2022 has the same privilege mode as the current privilege mode and\n \u2022 the interrupt priority reduction tree selects interrupt i as the maximum across all pending-and-enabled interrupts and\n \u2022 the interrupt i level is greater than max(xintstatus.xil, xintthresh.th )",
        "Verification Goal": "Test that interrupts of higher privilege level than the current privilege level can wake the core from WFI",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI",
        "Sub Feature": "Wakeup conditions",
        "Feature Description": "A pending-and-enabled interrupt i causes the hart to resume execution if interrupt i \n\u2022 has a lower privilege mode than the current privilege mode and \n\u2022 the interrupt priority reduction tree selects interrupt i as the maximum across all pending-and-enabled interrupts and \n\u2022 the interrupt i level is not equal to 0.",
        "Verification Goal": "nP < P cannot occur as we assume clic_irq_lvl = 2'b11\n\nNo test/assertion applicable, should be covered by clic_irq_lvl assertion ensuring that an interrupt with irq_lvl != 2'b11 never occurs",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_valid"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "WFI",
        "Sub Feature": "Wakeup conditions",
        "Feature Description": "Core only wakes up if any of the conditions mentioned above is true",
        "Verification Goal": "Assert that core remains in WFI mode unless correct wakeup conditions occur",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_wakeup_condition_not_valid"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "WFI ",
        "Sub Feature": "Entry",
        "Feature Description": "Execution of WFI causes the core to stop",
        "Verification Goal": "In normal execution the core stop within a certain time period after execution.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_causes_core_to_stop"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "WFI ",
        "Sub Feature": "Clock gating",
        "Feature Description": "WFI entry causes the clock to be gated",
        "Verification Goal": "The core is not clocked during WFI",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_wfi_wfe_causes_clock_gating"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "WFI ",
        "Sub Feature": "Output signal",
        "Feature Description": "core_sleep_o output signal is only asserted during active WFI",
        "Verification Goal": "Assert the proper operation of core_sleep_o",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_core_sleep_o_only_during_wfi_wfe"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Synchronous exception handling",
        "Sub Feature": "Horizontal synchronous exception traps",
        "Feature Description": "Serviced at same privilege mode with same interrupt level as instruction that raised exception ",
        "Verification Goal": "Assert that interrupt level is not changed when entering the exception handler\n(Can only occur in machine mode)",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_horizontal_exception_service"
    },
    {
        "Requirement Location": "CLIC 8675ec",
        "Feature": "Synchronous exception handling",
        "Sub Feature": "Vertical synchronous exception traps",
        "Feature Description": "Serviced at higher privilege mode at interrupt level 0 in the higher privilege mode\n\n(CV32E40S)",
        "Verification Goal": "Assert that user mode traps are taken in machine mode with interrupt level 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "a_vertical_exception_service"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + WFI",
        "Feature Description": "Proper interactions between interrupts and WFI",
        "Verification Goal": "Corner case\n\nTest random combinations of streams containing WFI-instructions with random interrupt requests",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_wfi\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_wfi"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Back to back WFI",
        "Feature Description": "Correct interactions between interrupts and back-to-back WFI instructions",
        "Verification Goal": "Corner case\n\nIn embedded context WFI is used often, ensure that WFI can be re-entered ASAP after servicing a ISR for a previous WFI",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "\nShould apply to both wfi and wfe, the following tests use back to back wfe and wfi-instructions + randomly toggled interrupts/wfe-pin. \nwfe_test :: wfe_wakeup_umode\nwfe_test :: wfe_wakeup\nwfe_test :: wfi_mstatus_tw_umode_illegal\n\nTODO: covergroups"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Debug",
        "Feature Description": "Correct interaction between interrupts and debug",
        "Verification Goal": "Corner case\nTest random streams of instructions interrupted by debug and random interrupt requests.\nGoal is to verify that interrupts are never taken in debug mode, and that interrupt- and debug transitions are handled correctly\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Exceptions",
        "Feature Description": "Correct interaction between interrupts and exceptions",
        "Verification Goal": "Corner case\nTest random streams of instructions interrupted by exceptions and random interrupt requests.\nGenerated exception code must take care to back up mepc, mcause when triggering exceptions to avoid corrupting program flow (these CSRs will be overwritten)\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Bus Error",
        "Feature Description": "Correct interaction between interrupts and bus errors",
        "Verification Goal": "Corner case\nTest random streams of instructions interrupted by random interrupt requests and random bus errors. Aims to verify that interrupts and bus errors are correctly prioritized by the system.\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Debug + Bus Error",
        "Feature Description": "Correct interaction between interrupts, debug and bus errors\n",
        "Verification Goal": "Corner case\nTest random streams of instructions, \n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Debug + WFI",
        "Feature Description": "Correct interaction between interrupts, debug and WFI\n",
        "Verification Goal": "Test random instruction streams containing WFI, where control flow changes occur due to random debug requests and random interrupts\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Debug + WFI + Bus Error",
        "Feature Description": "Correct interaction between interrupts, debug, wfi and bus errors",
        "Verification Goal": "Test random instruction streams containing WFI instructions, where control flow changes occur due to random debug requests, random bus errors, random interrupts\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Interrupt + Debug + WFI + Bus Error + Exceptions",
        "Feature Description": "Correct interaction between all trap sources",
        "Verification Goal": "Trap priority stress test\nTest random streams containing all trap sources to verify correct behavior\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Nested Interrupts",
        "Feature Description": "Correct interactions between nested interrupts",
        "Verification Goal": "Verify potential corner case\n\nImplement nested ISR. Randomly modify mintthresh.th to mask out certain interrupts and randomly trigger new interrupts with higher or lower priority to verify that interrupts with a higher privilege level are allowed to preempt\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Nested Interrupts + exceptions",
        "Feature Description": "Correct interactions between nested interrupts and exceptions",
        "Verification Goal": "Verify potential corner case\nSame as nested interrupts, but random streams include randomly inserted exception-causing instructions\nGenerated exception code must take care to back up mepc, mcause when triggering exceptions to avoid corrupting program flow (these CSRs will be overwritten)\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Nested interrupts + Debug",
        "Feature Description": "Correct interactions between nested interrupts and debug",
        "Verification Goal": "Verify potential corner case\nSame as nested interrupts, but random streams also gets control flow modified by random debug requests.\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Nested Interrupts + Debug + Bus Error",
        "Feature Description": "\nCorrect interactions between nested inteerrupts, debug and bus-errors",
        "Verification Goal": "Verify potential corner case\nSame as nested interrupts with debug, but also includes random bus errors\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Nested interrupts + Debug + WFI",
        "Feature Description": "Correct interactions between nested interrupts, debug and WFI",
        "Verification Goal": "Verify potential corner case\nSame as nested interrupts with debug, but  the instruction stream should also include WFI instructions.\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "UM v0.3.0 Common",
        "Feature": "Trap priority",
        "Sub Feature": "Nested interrupts + Debug + WFI + Bus Error + Exceptions",
        "Feature Description": "Correct interactions between nested interrupts and all other trap types",
        "Verification Goal": "Verify potential corner case\nTest nested interrupts with randomly traps (all types)\nGenerated exception code must take care to back up mepc, mcause when triggering exceptions to avoid corrupting program flow (these CSRs will be overwritten)\n\nNote, these potential corners are deliberately mentioned separately to be able to more easily pinpoint any bugs that may occur in regressions - thus ideally should be implemented with different tests.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "TODO: Expect this to be covered by assertions taking correct priority into account"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit Load instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit Store instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit Shift instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit logical instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit compare instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit jump instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit FENCE instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 32-bit system instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq\n\nMissing: ecall, csrrwi, csrrc"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BEQ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BEQ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BNE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BNE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BLT instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BLT instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BGE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BGE instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BLTU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BLTU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken BGEU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken BGEU instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit load instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq\n\nMissing: c.lw"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit store instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit arithmetic instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq\n\nSee below, coverage model does not support Zcb, cmp, cmt"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit shift instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit jump instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All 16-bit system instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken C.BEQZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken C.BEQZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Nontaken C.BNEZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Taken C.BNEZ instruction interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Needs coverage model update, currently taken/not taken is not tracked\n"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 M instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zba instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zbb instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zbc instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zbs instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zicsr instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq\n\nMissing: csrrwi, csrrc"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zifencei instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zc instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "uvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_entry.cp_irq\nuvm_pkg.uvm_test_top.env.cov_model.clic_covg.clic_irq_exit.cp_irq\n\nMissing: c.lw, c.addi16sp, c.addi4spn"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zca instructions interrupted\n",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Awaiting isacov update"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zcb instructions interrupted\n",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Awaiting isacov update"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zcmb instructions interrupted\n",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Awaiting isacov update"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zcmt instructions interrupted\n",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Awaiting isacov update"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 Zcmp instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Awaiting isacov update"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "Illegal instructions interrupted",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Missing covergroup"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 A instructions interrupted\n(CV32E40X)",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "Missing covergroup"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All X interface instructions interrupted\n(CV32E40X)",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "N/A"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32F instructions interrupted\n(CV32E40X XIF only if supported)",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "N/A"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32 P instructions interrupted\n(CV32E40X XIF only if supported)",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "N/A"
    },
    {
        "Requirement Location": "Risc-V Priv. 1.12",
        "Feature": "Interrupt instruction",
        "Sub Feature": "All RV32V instructions interrupted\n(CV32E40X XIF only if supported)",
        "Feature Description": "A specific instruction is interrupted properly",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "N/A"
    },
    {
        "Requirement Location": "",
        "Feature": "Interrupt instruction",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interrupt instruction",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interrupt instruction",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interrupt instruction",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": ""
    },
    {
        "Requirement Location": " ---- END ----",
        "Feature": "Interrupt instruction",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Randomness check on interrupts versus instruction stream",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": ""
    }
]