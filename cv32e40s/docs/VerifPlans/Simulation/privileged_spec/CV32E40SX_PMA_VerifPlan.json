[
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Regions",
        "Sub Feature": "Valid number of regions",
        "Feature Description": "There shall be between 0 and 16 PMA regions configured.",
        "Verification Goal": "Assert that highest numbered PMA region < 16 (assuming 0-indexed)\n\nCover: Having 0 regions, having maximum num regions, and having something in between.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.a_pma_valid_num_regions\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.a_pma_valid_num_regions\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk2.a_pma_match_index\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.genblk2.a_pma_match_index\n\nCOV: dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.pma_cov_instr_i.cg_inst.cp_numregions",
        "Comment": "TODO tests must be added to regression lists.\n\nTODO directed tests has parts to uncomment if RTL is ready.\n\nTODO everything \"atomics\" must be changed to \"integrity\" for 40s."
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "Configuration to be tested",
        "Feature Description": "0 Regions - Deconfigured",
        "Verification Goal": "Test configuration 1, aims to verify the following:\n1. Default parameters for entire memory range",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": "No cover, but fascilitates other covers below.\n\nTODO these regions are out of date vs testbench.\n\nTODO must be used in formal regressions too."
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "1 Region: \nR[0]: 0x0000_0000-0xFFFF_FFFF (MBCA = 1111)\n\nMBCA = M(ain memory)\n             B(ufferable)\n             C(acheable)\n             A(tomic operations allowed)\n\n",
        "Verification Goal": "Test configuration 2, aims to verify the following:\n1. System configured with 1 PMA region only\n2. Full address range of maximum size\n3. Upper/Lower bounds for first region set to min/max values",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "1 Region: \nR[0]: 0x0000_0000-0x7FFF_FFFF (MBCA = 1111)",
        "Verification Goal": "Test configuration 3, aims to verify the following:\n1. Correct functionality for 1 defined region\n2. Correct behavior for undefined regions when a region is defined",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "7 Regions:\nR[0]: 0x0000_0000-0x1FFF_FFFF (MBCA = 1111)\nR[1]: 0x2000_0000-0x3FFF_FFFF (MBCA = 1101)\nR[2]: 0x4000_0000-0x5FFF_FFFF (MBCA = 0101)\nR[3]: 0x6000_0000-0x9FFF_FFFF (MBCA = 1001)\nR[4]: 0xA000_0000-0xDFFF_FFFF (MBCA = 0101)\nR[5]: 0xE000_0000-0xE00F_FFFF (MBCA = 0000)\nR[6]: 0xE010_0000-0xFFFF_FFFF (MBCA = 0101)",
        "Verification Goal": "Test configuration 4, aims to verify the following:\n1. A standard memory map (Based on ARM Cortex)\n2. A fully defined, contiguous memory map with no undefined regions\n3. Multiple, non-overlapping regions",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "16 Regions:\nR[0]:   0x4800_0000-0x49FF_FFFF (MBCA = 1011)\nR[1]:   0x4400_0000-0x4BFF_FFFF (MBCA = 0001)\nR[2]:   0x3ACE_0000-0x4ABC_FFFF (MBCA = 0100)\nR[3]:   0x3600_A000-0x4F99_FFFF (MBCA = 1111)\nR[4]:   0x3420_C854-0x5000_ABFF (MBCA = 1101)\nR[5]:   0x3100_FCAB-0x5000_BCCA (MBCA = 1001)\nR[6]:   0x3000_1353-0x5140_FFFF (MBCA = 0000)\nR[7]:   0x2C5A_3200-0x52FF_FFFF (MBCA = 0101)\nR[8]:   0x2A00_0000-0x56FF_FFFF (MBCA = 1111)\nR[9]:   0x2340_000A-0x600F_FFFF (MBCA = 0001)\nR[10]: 0x2000_0000-0x63FF_FFFF (MBCA = 0101)\nR[11]: 0x13AC_AA55-0x7FFF_FFFF (MBCA = 1011)\nR[12]: 0x1000_000F1-0x82FF_FFFF (MBCA = 1101)\nR[13]: 0x0500_0000-0x8459_FFFF (MBCA = 0100)\nR[14]: 0x0200_0000-0xEFFF_FFFF (MBCA = 0000)\nR[15]: 0x0000_A000-0xFFFE_FFFF (MBCA = 1111)",
        "Verification Goal": "Test configuration 5, aims to verify the following:\n1. Region match priority\n2. Maximum number of separate areas in memory (33)\n\nAddress may be modified to better suit implementation and verification enviornment, but the following criteria must be met:\n1. Each defined region must be enclosed by the adjacent region of lower priority\n2. No region boundaries must overlap\n3. There shall be undefined space prior to and aft of largest, highest numbered region\n",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "16 Regions:\nR[0]:   0x0001_0000-0x001F_FFFF (MBCA = 1001)\nR[1]:   0x0030_0000-0x04FF_FFFF (MBCA = 1111)\nR[2]:   0x1000_0000-0x1001_0000 (MBCA = 0100)\nR[3]:   0x1800_1234-0x18FF_AB21 (MBCA = 0000)\nR[4]:   0x2020_0010-0x2FFF_0000 (MBCA = 0001)\nR[5]:   0x3100_A000-0x32FF_FFFF (MBCA = 1111)\nR[6]:   0x3440_0000-0x3800_FFFF (MBCA = 0100)\nR[7]:   0x4AAA_F000-0x4C00_FFFF (MBCA = 1101)\nR[8]:   0x4D00_5555-0x4FFF_ABCD (MBCA = 1011)\nR[9]:   0x5100_0000-0x52FF_FFFF (MBCA = 0000)\nR[10]: 0x5400_0000-0x5FFF_FFFF (MBCA = 1111)\nR[11]: 0x6300_0000-0x6700_FFFF (MBCA = 0101)\nR[12]: 0xA000_0000-0xAFFF_FFFF (MBCA = 1001)\nR[13]: 0xBC00_0000-0xBCFF_FFFF (MBCA = 1101)\nR[14]: 0xC000_0000-0xDFFF_FFFF (MBCA = 0001)\nR[15]: 0xE700_EF00-0xE9FF_FFFF (MBCA = 0101)",
        "Verification Goal": "Test configuration 6, aims to verify designs with the following characteristic:\n1. Non-contiguously defined maximum number of memory regions\n2. Maximum number of separate areas In memory (33)\n3. No overlap, single matching regions\n4. Non-defined areas prior and aft of each defined region\n\nAddress map may be modified to better suit actual implemetations, but the above criteria must be adhered to.",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "16 Regions:\nNote: Zero length regions are intentional\nR[0]:   0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[1]:   0x5555_5555-0x5555_5555 (MBCA = 0000)\nR[2]:   0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[3]:   0xAAAA_AAAA-0xAAAA_AAAA (MBCA = 0000)\nR[4]:   0xCCCC_CCCC-0xCCCC_CCCC (MBCA = 0000)\nR[5]:   0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[6]:   0xE38E_E38E-0xE38E_E38E (MBCA = 0000)\nR[7]:   0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[8]:   0xFFFF_FFFF-0xFFFF_FFFF (MBCA = 0000)\nR[9]:   0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[10]: 0x9249_2492-0x9249_2492 (MBCA = 0000)\nR[11]: 0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[12]: 0xDB6D_B6DB-0xDB6D_B6DB (MBCA = 0000)\nR[13]: 0x0000_0000-0x0000_0000 (MBCA = 0000)\nR[14]: 0x1249_2492-0x1249_2492 (MBCA = 0000)\nOnly one non-zero region:\nR[15]: 0x0000_0000-0xFFFF_FFFF (MBCA = 1111)",
        "Verification Goal": "Test configuration 7, aims to verify the following:\n1. Zero length regions does not match any accesses\n2. Upper/Lower bound of outlier (last) region set to min/max of address range\n\nAddress map may be modified to better suit actual implementations, but R[15] must be defined to min/max possible address range. Remaining regions shall have 0 length.\n",
        "Pass/Fail Criteria": "Any/All",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "Coverpoints",
        "Feature Description": "Instruction fetch coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with passing instruction fetch",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: *.pma_cov_data_i.cover_item_covergroup_cg_mpu_inst_mpu_cg_cross_x_multimatch_aligned_loadstoreexec_allow_*",
        "Comment": "Note: These could also have used RVFI instead.\n\nNote: Not very feasible to match on every single cfg index, because some are overshadowed by overlapping regions and to model this is expensive."
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Load instruction coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with passing load instruction",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: *.pma_cov_data_i.cover_item_covergroup_cg_mpu_inst_mpu_cg_cross_x_multimatch_aligned_loadstoreexec_allow_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Store instruction coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with passing store instruction",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: *.pma_cov_data_i.cover_item_covergroup_cg_mpu_inst_mpu_cg_cross_x_multimatch_aligned_loadstoreexec_allow_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Atomic instruction coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with atomic operation",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Load alignment error coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with load alignment error",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: *.pma_cov_data_i.cover_item_covergroup_cg_mpu_inst_mpu_cg_cross_x_multimatch_aligned_loadstoreexec_allow_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Store alignment error coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with store alignment error",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: *.pma_cov_data_i.cover_item_covergroup_cg_mpu_inst_mpu_cg_cross_x_multimatch_aligned_loadstoreexec_allow_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Atomic load-reserved unallowed error coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with atomic load-reserved unallowed error",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Regions",
        "Sub Feature": "",
        "Feature Description": "Atomic store-conditional unallowed error coverpoint",
        "Verification Goal": "Region index or default IO unmapped region crossed with atomic store-conditional unallowed error",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "Risc-V Priv. spec",
        "Feature": "PMA Readability",
        "Sub Feature": "PMA readable by SW",
        "Feature Description": "Design must support SW readback of attributes",
        "Verification Goal": "N/A. Can be SW-readable via a C-header, or is otherwise the responsibility of integration- or system-level testing.",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Code Execution",
        "Sub Feature": "Code Execution only from main memory",
        "Feature Description": "Code execution is not allowed from IO region, any attempts to do so should result in an instruction access fault (exception code 1)",
        "Verification Goal": "Verify that attempted code execution from an address located in a PMA region classified as IO always yields an instruction access fault (code 1). Accesses from Memory should never yield this access fault as no eXecutable flag exists, only Memory/IO classification\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval\n\nE.g. execute a JMP instruction to an area defined as IO (and/or unconfigured PMA region) and verify that an instruction access fault is triggered",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Code Execution",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that attempted code execution from an address located in a PMA region classified as IO always yields an instruction access fault (code 1). Accesses from Memory should never yield this access fault as no eXecutable flag exists, only Memory/IO classification\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval\n\nE.g. execute a JMP instruction to an area defined as IO (and/or unconfigured PMA region) and verify that an instruction access fault is triggered",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg.cross_pma",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Code Execution",
        "Sub Feature": "Instruction fetch violation coverpoints",
        "Feature Description": "Instruction group type for failing instruction fetch violations",
        "Verification Goal": "Instruction group type cover from ISACOV for each violated PMA instruction fetch",
        "Pass/Fail Criteria": "Other",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: TODO",
        "Comment": "TODO missing cover. (Problem: Depends on ISACOV updates.)"
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Access match",
        "Sub Feature": "Non-Overlapping PMA Regions",
        "Feature Description": "A match should always be inside its matching region, \nLower_bound[region] <= addr[addr_max:2] < Upper_bound[region]",
        "Verification Goal": "Assert that match[region] always implies that the following holds: \nlower[region] & 2'b00 <= addr[31:0] < upper[region] 2'b00",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk2.a_pma_match_bounds\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.genblk2.a_pma_match_bounds",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Perform arbitrary accesses: Verify that accesses are matched to their respective memory regions",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "ENV capability, not specific test",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk2.a_pma_match_lowest\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.genblk2.a_pma_match_lowest",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Perform arbitrary accesses: Verify that accesses are matched to their respective memory regions",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *pma_cov_*_i.cover_item_covergroup_cg_inst_cg_inst_coverpoint_cp_multimatch*\n\nCOV: *pma_cov_*_i.cover_item_covergroup_cg_inst_cg_inst_coverpoint_cp_matchregion*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "Overlapping PMA Regions",
        "Feature Description": "Any access matching multiple regions should attain the attributes of the lowest numbered matching region",
        "Verification Goal": "Perform arbitrary accesses and verify that addr[lowest byte] is always interpreted with the attributes of the lowest numbered matching region.\n\nCoverage: Multiple regions matching at once.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: TODO",
        "Comment": "TODO missing directed test?"
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Perform arbitrary accesses and verify that addr[lowest byte] is always interpreted with the attributes of the lowest numbered matching region.\n\nCoverage: Multiple regions matching at once.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *pma_cov_*_i.cover_item_covergroup_cg_inst_cg_inst_coverpoint_cp_multimatch*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Perform arbitrary accesses and verify that addr[lowest byte] is always interpreted with the attributes of the lowest numbered matching region.\n\nCoverage: Multiple regions matching at once.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk2.a_pma_match_lowest\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.genblk2.a_pma_match_lowest",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "Non-Matching Accesses",
        "Feature Description": "PMA_NUM_REGIONS==0: \nAccesses not matching attribute regions should be treated as: \nMemory\nNon-Bufferable\nNon-Cacheable\nAtomic operations not allowed",
        "Verification Goal": "Arbitrary accesses to non-configured PMA-areas.\nSelf checking test should attempt the following: \n- Non-aligned load/store accesses: should pass\n- Atomic lr/sc operations (if supported by core): should fail\n- Cacheable/Bufferable operations - verify instr and data_memtype[x] for correct behavior. (Assertions in OBI section should apply)\n- Instruction fetch and execute: should pass",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma_0reg/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Arbitrary accesses to non-configured PMA-areas.\nSelf checking test should attempt the following: \n- Non-aligned load/store accesses: should pass\n- Atomic lr/sc operations (if supported by core): should fail\n- Cacheable/Bufferable operations - verify instr and data_memtype[x] for correct behavior. (Assertions in OBI section should apply)\n- Instruction fetch and execute: should pass",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: TODO\n\nCOV: *pma_cov_*_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_multimatch_aligned_loadstoreexec_*",
        "Comment": "TODO is the random stream run without pma regions?"
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "PMA_NUM_REGIONS>0\nAccesses not matching attribute regions should be treated as: \nIO\nNon-Bufferable\nNon-Cacheable\nAtomic operations not allowed",
        "Verification Goal": "Arbitrary accesses to non-configured PMA-areas.\nSelf checking test should attempt the following: \n- Non-aligned load/store accesses: should fail\n- Atomic lr/sc operations (if supported by core): should fail\n- Cacheable/Bufferable operations - verify instr and data_memtype[x] for correct behavior. (Assertions in OBI section should apply)\n- Instruction fetch and execute: should fail",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: TODO",
        "Comment": "TODO missing directed test?"
    },
    {
        "Requirement Location": "",
        "Feature": "Access match",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Arbitrary accesses to non-configured PMA-areas.\nSelf checking test should attempt the following: \n- Non-aligned load/store accesses: should fail\n- Atomic lr/sc operations (if supported by core): should fail\n- Cacheable/Bufferable operations - verify instr and data_memtype[x] for correct behavior. (Assertions in OBI section should apply)\n- Instruction fetch and execute: should fail",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *pma_cov_*_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_multimatch_aligned_loadstoreexec_*",
        "Comment": ""
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "OBI transfer flags",
        "Sub Feature": "InstructionFetches",
        "Feature Description": "Bufferable flag effects - For any instruction fetch marked bufferable, the corresponding OBI transfer  instr_memtype[0] signal should be set to match the bufferable flag.",
        "Verification Goal": "Ensure that instr_memtype[0] is set to 1 when an instruction fetch attempt is performed with the bufferable flag set to 1. (Which is never, because \"Accesses to regions marked as bufferable (bufferable=1) will result in the OBI mem_type[0] bit being set, except if the access was an instruction fetch [...]\".)",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.a_pma_obi_bufoff\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk4.a_pma_obi_bufon_unreachable\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.pma_assert_instr_i.a_memtype_bufferable\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Ensure that instr_memtype[0] is set to 0 when an instruction fetch attempt is performed with the bufferable flag set to 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.a_pma_obi_bufoff\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk4.a_pma_obi_bufon_unreachable\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.pma_assert_instr_i.a_memtype_bufferable\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "Cacheable flag effects - For any instruction fetch marked cacheable, the corresponding OBI transfer instr_memtype[1] signal should be set to match the cacheable flag.",
        "Verification Goal": "Ensure that instr_memtype[1] is set to 1 when an instruction fetch attempt is performed with the cacheable flag set to 1",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.genblk5.a_pma_obi_cacheon\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Ensure that instr_memtype[1] is set to 0 when an instruction fetch attempt is performed with the cacheable flag set to 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.mpu_if_sva.a_pma_obi_cacheoff\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "Instruction fetch attempts to PMA restricted regions should cause instr_req_o to be deasserted.",
        "Verification Goal": "Ensure that PMA-violating instruction fetch attempts does not assert the instr_req_o signal by attempting execution of instructions from allowed and restricted areas of memory, checking that instr_req_o remains deasserted when restricted areas are accessed",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.pma_assert_instr_i.a_req_prohibited\n\nCOV: *.pma_cov_instr_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_loadstoreexec_allow_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "DataFetches",
        "Feature Description": "Bufferable flag effects - data_memtype[0] should match the bufferable flag.",
        "Verification Goal": "Ensure that data_memtype[0] is set to 1 when a data fetch attempt is performed with the bufferable flag set to 1",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.genblk4.a_pma_obi_bufon\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.a_memtype_bufferable\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Ensure that data_memtype[0] is set to 0 when a data fetch attempt is performed with the bufferable flag set to 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.a_pma_obi_bufoff\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.a_memtype_bufferable\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "Cacheable flag effects - data_memtype[1] should match the cacheable flag",
        "Verification Goal": "Ensure that data_memtype[1] is set to 1 when an data fetch attempt is performed with the cacheable flag set to 1",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.genblk5.a_pma_obi_cacheon\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Ensure that data_memtype[1] is set to 0 when an data fetch attempt is performed with the cacheable flag set to 0",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.mpu_lsu_sva.a_pma_obi_cacheoff\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "OBI transfer flags",
        "Sub Feature": "",
        "Feature Description": "Data fetch attempts to PMA restricted regions should cause data_req_o to be deasserted.",
        "Verification Goal": "Ensure that PMA violating data fetch attempts does not assert the data_req_o signal",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.a_req_prohibited\n\nCOV: *.pma_cov_data_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_loadstoreexec_allow_*",
        "Comment": ""
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "Non-naturally aligned data accesses shall only occur for Main memory accesses.",
        "Feature Description": "Non-naturally aligned load access attempts to I/O shall\n cause a precise load access fault (exception code 5).",
        "Verification Goal": "Attempt arbitrary non-naturally aligned load accesses to I/O regions specified by PMA and ensure that these accesses triggers precise load access fault exceptions (code 5). Ensure that non-aligned main memory accesses to permitted regions do not generate these exceptions. \n\nThe following CSRs must be verified: Verify mcause, mepc, mtval\n\nTest possible combinations of misalignment, the following are of particular interest as it will result in two memory access operations: \nld from addresses in IO space with or_reduce(addr_lsb[2:0]) = 1\nlw from addresses in IO space with or_reduce(addr_lsb[1:0]) = 1\nlh from addresses in IO space with and_reduce(addr_lsb[1:0]) = 1\n",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": "TODO test is commented out"
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt arbitrary non-naturally aligned load accesses to I/O regions specified by PMA and ensure that these accesses triggers precise load access fault exceptions (code 5). Ensure that non-aligned main memory accesses to permitted regions do not generate these exceptions. \n\nThe following CSRs must be verified: Verify mcause, mepc, mtval\n\nTest possible combinations of misalignment, the following are of particular interest as it will result in two memory access operations: \nld from addresses in IO space with or_reduce(addr_lsb[2:0]) = 1\nlw from addresses in IO space with or_reduce(addr_lsb[1:0]) = 1\nlh from addresses in IO space with and_reduce(addr_lsb[1:0]) = 1\n",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *.pma_cov_data_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_aligned_main_loadstoreexec_*",
        "Comment": "TODO missing \"ld/lw/lh\" specific covers."
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "Non-naturally aligned store access attempts to I/O shall\n cause a precise store access fault (exception code 7).",
        "Verification Goal": "Attempt arbitrary non-naturally aligned store accesses to I/O regions specified by PMA and ensure that these accesses triggers precise store access fault exceptions (code 7). Ensure that non-aligned main memory accesses to permitted regions do not generate these exceptions\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval\n\nTest possible combinations of misalignment, the following are of particular interest as it will result in two memory access operations: \nsd to addresses in IO space with or_reduce(addr_lsb[2:0]) = 1\nsw to addresses in IO space with or_reduce(addr_lsb[1:0]) = 1\nsh to addresses in IO space with and_reduce(addr_lsb[1:0]) = 1",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt arbitrary non-naturally aligned store accesses to I/O regions specified by PMA and ensure that these accesses triggers precise store access fault exceptions (code 7). Ensure that non-aligned main memory accesses to permitted regions do not generate these exceptions\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval\n\nTest possible combinations of misalignment, the following are of particular interest as it will result in two memory access operations: \nsd to addresses in IO space with or_reduce(addr_lsb[2:0]) = 1\nsw to addresses in IO space with or_reduce(addr_lsb[1:0]) = 1\nsh to addresses in IO space with and_reduce(addr_lsb[1:0]) = 1",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *.pma_cov_data_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_aligned_main_loadstoreexec_*",
        "Comment": "TODO missing \"sd/sw/sh\" specific covers."
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "Multi-memory operation instructions",
        "Feature Description": "When the first memory access of a non-naturally aligned load operation fails due to PMA checks, the second memory access shall also be supressed. ",
        "Verification Goal": "Attempt non-naturally aligned load instructions to:\n- IO\n- Boundary between IO region and memory region s.t. first access will be in IO and second access will be in main memory. \n\nIn both cases, data_req_o should remain low for both operations.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: TODO",
        "Comment": "TODO missing directed test?"
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt non-naturally aligned load instructions to:\n- IO\n- Boundary between IO region and memory region s.t. first access will be in IO and second access will be in main memory. \n\nIn both cases, data_req_o should remain low for both operations.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A :uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.a_failure_denies_subsequents\n\nRTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_pmafault_loadstore_firstfail_*\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_loadstore_boundary_bin_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "If a PMA access fault occurs for any of the memory accesses in a non-naturally aligned load, the register file shall not be updated",
        "Verification Goal": "Attempt non-naturally aligned load instructions to:\n- IO\n- Boundary between IO region and memory region s.t. first access will be in IO and second access will be in main memory. \n- Boundary between IO region and memory region s.t. first access will be in memory and second access will be in IO.\n\nIn both cases, the register file should remain unchanged.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt non-naturally aligned load instructions to:\n- IO\n- Boundary between IO region and memory region s.t. first access will be in IO and second access will be in main memory. \n- Boundary between IO region and memory region s.t. first access will be in memory and second access will be in IO.\n\nIn both cases, the register file should remain unchanged.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_pmafault_loadstore_firstfail_*\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_loadstore_boundary_bin_*",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "When the first memory access of a non-naturally aligned store operation fails due to PMA checks, the second memory access shall also be supressed. ",
        "Verification Goal": "Attempt non-naturally aligned load instructions to:\n- IO\n- Boundary between IO region and memory region s.t. first access will be in IO and second access will be in main memory. \n\n\nIn both cases, data_req_o should remain low for both operations.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": "TODO test is commented out"
    },
    {
        "Requirement Location": "",
        "Feature": "Non-Naturally Aligned Accesses",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt non-naturally aligned load instructions to:\n- IO\n- Boundary between IO region and memory region s.t. first access will be in IO and second access will be in main memory. \n\n\nIn both cases, data_req_o should remain low for both operations.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: cv32e40s/tests/programs/corev-dv/corev_rand_pma_test/\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_pmafault_loadstore_firstfail_*\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_loadstore_boundary_bin_*",
        "Comment": ""
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Zce Extension",
        "Sub Feature": "Push instructions",
        "Feature Description": "push, push.e, c.push, c.push.e instructions shall only occur for main memory regions, any such *push* attempts to I/O shall cause a precise load access fault (exception code 5)",
        "Verification Goal": "Attempt *push* operations to main memory and IO, verify that all *push* attempts to IO causes a precise store access fault (code 5) and that this does not occur for main memory.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": "TODO test is commented out"
    },
    {
        "Requirement Location": "",
        "Feature": "Zce Extension",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt *push* operations to main memory and IO, verify that all *push* attempts to IO causes a precise store access fault (code 5) and that this does not occur for main memory.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: TODO\n\nCOV: *.pma_cov_data_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_loadstoreexec_main_pushpop_*",
        "Comment": "TODO missing random test?\n\nNote: Cover doesn't check that it goes through WB."
    },
    {
        "Requirement Location": "",
        "Feature": "Zce Extension",
        "Sub Feature": "Pop instructions",
        "Feature Description": "pop, popret, pop.e, popret.e, c.pop, c.popret, c.pop.e, c.popret.e shall only occur for main memory regions, any such *pop* attempts from I/O shall cause a precise load access fault (exception code 7)",
        "Verification Goal": "Attempt *pop* operations to main memory and IO, verify that all *pop* attempts to IO causes a precise loac access fault (code 7) and that this does not occur for main memory.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": "TODO test is commented out."
    },
    {
        "Requirement Location": "",
        "Feature": "Zce Extension",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt *pop* operations to main memory and IO, verify that all *pop* attempts to IO causes a precise loac access fault (code 7) and that this does not occur for main memory.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: TODO\n\nCOV: *.pma_cov_data_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_loadstoreexec_main_pushpop_*",
        "Comment": "TODO missing random test?\n\nNote: Cover doesn't check that it goes through WB."
    },
    {
        "Requirement Location": "",
        "Feature": "Zce Extension",
        "Sub Feature": "Table Jump",
        "Feature Description": "Both jumps from a Zce table jump should be checked by PMA and handled as instruction fetches. \n\nPMA failure in the first table jump should suppress the second jump - instr_fetch_o should be suppressed and no jump to the restricted address shall be performed",
        "Verification Goal": "First jump: Testing a violating first jump (jump to the jump table) requires a custom linker script that deliberatly places the jump table in a non-executable (IO) region. A test must verify that instructions attempting to jump to the jump table location causes an instruction access fault (exception code 1) and that instr_req_o is suppressed\n\nThe second instruction fetch should be suppressed.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": "TODO test is commented out"
    },
    {
        "Requirement Location": "",
        "Feature": "Zce Extension",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Second jump: Test should verify that a PMA access fault on the second jump (jump to the actual instruction address in IO region) should cause an instruction access fault (exception code 1), suppressing instr_req_o. ",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma/",
        "Comment": "TODO test is commented out"
    },
    {
        "Requirement Location": "",
        "Feature": "Zce Extension",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Coverpoint - Table jumps passing PMA checks crossed with region index or default unmapped  memory region",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: TODO\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_pmafault_tablejump_*\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_aligned_pmafault_firstfail_tablejump:_*\n\nCOV: *.pma_cov_instr_i.cover_item_covergroup_cg_mpu_inst_mpu_cg_cross_x_allow_jvt_*",
        "Comment": "TODO missing random test?\n\nNote: This is not maximally comprehensive, but the modelling that would otherwise be required is disproportionately complex."
    },
    {
        "Requirement Location": "Zce spec. proposal",
        "Feature": "Zce Extension",
        "Sub Feature": "",
        "Feature Description": "Instruction fetch exceptions occurring when executing an address in the jump table should lead to mepc being set to the C.TBLJ* instruction, and mtval to the address in the jump table entry",
        "Verification Goal": "Verify that an instruction fetch exception resulting from a jump table entry leads to mepc being set to the C.TBLJ* instruction and mtval to the address in the jump table entry.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: TODO",
        "Comment": "TODO missing directed test?"
    },
    {
        "Requirement Location": "Risc-V Debug spec.",
        "Feature": "Debug mode",
        "Sub Feature": "Single step PMA exceptions",
        "Feature Description": "Any instruction fetch exception that occurs while single stepping, causes debug mode to be re-entered after PC is changed to the exception handler and the appropriate tval and cause registers are updated",
        "Verification Goal": "Verify that instruction fetches to PMA IO regions fails, the appropriate CSRs and PC is updated to the appropriate values and debug mode is reentered. ",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma_debug/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug mode",
        "Sub Feature": "Program buffer PMA exceptions",
        "Feature Description": "Exceptions in the program buffer should cause the program buffer code to end and cmderr set to 3 (exception error)",
        "Verification Goal": "Verify that program buffer code attempting to fetch instructions from PMA IO region fails, PC is set to dm_exception_addr_i and cmderr is set to 3 (exception error). No other registers should be changed due to this exception.",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "DTC: cv32e40s/tests/programs/custom/pma_debug/",
        "Comment": ""
    },
    {
        "Requirement Location": "40s UM 0.8.0",
        "Feature": "DebugRange",
        "Sub Feature": "DebugRange",
        "Feature Description": "\"CV32E40S overrules the PMA and PMP settings for the Debug Module region when it is in debug mode\"",
        "Verification Goal": "Attempt access within/outside the dm region, in both dmode/not, check that the combo within/dmode never gets blocked and that the other combos follow the ordinary rules.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Code Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.if_stage_i.mpu_i.pma_assert_instr_i.a_dm_region\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.a_dm_region\n\nA: (The other cases are covered by all other testing.)\n\nCOV: *.pma_cov_instr_i.cover_item_covergroup_cg_inst_cg_inst_cross_x_dmregion_dmode_*",
        "Comment": ""
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Atomic operations",
        "Sub Feature": "Atomic operations shall only occur for regions in which Atomic operations are allowed. (Only applies for cores with A-extension)",
        "Feature Description": "Load-Reserved attempts to a region where atomic operations are not permitted shall cause a precise load access fault (exception code 5)",
        "Verification Goal": "Attempt arbitrary load-reserved memory operations to regions where atomic operations are not permitted and ensure that these operations trigger precise store/AMO access fault exceptions (code 7). Ensure that these operations do not generate these exceptions when performed on supported regions.\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "(N/A for 40s)",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Atomic operations",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt arbitrary load-reserved memory operations to regions where atomic operations are not permitted and ensure that these operations trigger precise store/AMO access fault exceptions (code 7). Ensure that these operations do not generate these exceptions when performed on supported regions.\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "(N/A for 40s)",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Atomic operations",
        "Sub Feature": "",
        "Feature Description": "Store-Conditional or Atomic Memory Operation (AMO) attempts to a region where Atomic operations are not allowed shall cause a precise store/AMO access fault (exception code 7).",
        "Verification Goal": "Attempt arbitrary store-conditional and atomic memory operations to regions where atomic operations are not allowed and ensure that these operations trigger precise store/AMO access fault exceptions (code 7). Ensure that this fault is not triggered when performing these operations on supported regions.\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval",
        "Pass/Fail Criteria": "Self Checking Test",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Testcase",
        "Link to Coverage": "(N/A for 40s)",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Atomic operations",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Attempt arbitrary store-conditional and atomic memory operations to regions where atomic operations are not allowed and ensure that these operations trigger precise store/AMO access fault exceptions (code 7). Ensure that this fault is not triggered when performing these operations on supported regions.\n\nThe following CSRs must be verified: Verify mcause, mepc, mtval",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "(N/A for 40s)",
        "Comment": ""
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "Fence* instructions",
        "Sub Feature": "Fence instructions disregards distinction between memory and IO",
        "Feature Description": "Fence instruction shall not be impacted by PMA memory/IO attribute and execute as a conservative fence on all operations ",
        "Verification Goal": "Coverpoint - Fence instructions (Fence, fence.i) should not be impacted by PMA.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "RTC: TODO\n\nCOV: *.pma_cov_data_i.gen_rvfi_cg.cover_item_covergroup_cg_rvfi_inst_rvfi_cg_cross_x_waspmafault_wasmain_wasloadstore_fence_*",
        "Comment": "TODO missing random test?"
    },
    {
        "Requirement Location": "UM 0e447ac",
        "Feature": "WriteBuffer",
        "Sub Feature": "Bufferable operations",
        "Feature Description": "Only bufferable store accesses should use the internal write buffer",
        "Verification Goal": "Assert that write buffer remains unchanged unless store accesses carry the bufferable flag",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.gen_writebuf.a_writebuf_bufferable\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.core_i.load_store_unit_i.mpu_i.pma_assert_data_i.gen_writebuf.gen_noregions_nobuf.a_writebuf_noregions\n\nCOV: uvm_pkg.uvm_test_top.env.pma_agent.region_cov_model*.pma_access_covg",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "WriteBuffer",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Assert that write buffer remains unchanged unless store accesses carry the bufferable flag",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "WriteBuffer",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Assert that write buffer remains unchanged unless store accesses carry the bufferable flag",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "WriteBuffer",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Assert that write buffer remains unchanged unless store accesses carry the bufferable flag",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "WriteBuffer",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Assert that write buffer remains unchanged unless store accesses carry the bufferable flag",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": " -------END---------",
        "Feature": "WriteBuffer",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Assert that write buffer remains unchanged unless store accesses carry the bufferable flag",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    }
]