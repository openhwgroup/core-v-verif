[
    {
        "Requirement Location": "privspec",
        "Feature": "Misc",
        "Sub Feature": "SupportedLevels",
        "Feature Description": "\"At any time, a RISC-V hardware thread (hart) is running at some privilege level encoded as a mode\nin one or more CSRs [User, Supervisor, (Reserved), Machine]\"",
        "Verification Goal": "Run all supported levels (U-mode, M-mode); ensure no unsupported levels can be run (S-mode, reserved).\n\nCoverage: Attempts to set various modes.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_no_unsupported_modes\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_umode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_mmode\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Misc",
        "Sub Feature": "ResetMode",
        "Feature Description": "\"M-mode [...] is the first mode entered at reset.\"",
        "Verification Goal": "Wait for reset to end, ensure that the core is in M-mode.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_initial_mode\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Misc",
        "Sub Feature": "Refetch",
        "Feature Description": "Before a mode change, instructions can have been prefetched and exist in the pipeline but the fetching was done in a different mode than what is changed to. This should not allow for privilege escalation so the instructions must be refetched.",
        "Verification Goal": "Checking: Handled by \"InstrProt\" below.\n\nCoverage: Instr fetched twice (same pc, different prot).",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_refetch_as_umode_notrap\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_refetch_as_mmode_notrap\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_refetch_as_umode_trap\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_refetch_as_mmode_trap",
        "Comment": ""
    },
    {
        "Requirement Location": "obi",
        "Feature": "Misc",
        "Sub Feature": "InstrProt",
        "Feature Description": "\"prot[2:1]\nUser/Application (2\u2019b00), Supervisor (2\u2019b01), Reserved (2\u2019b10), Machine (2\u2019b11)\nThis matches the privilege levels from [RISC-V-PRIV].\"",
        "Verification Goal": "Track prot[2:1] on instruction fetches on obi, observe retirements on rvfi, ensure the privilege mode of the instruction's execution matches what it was fetched as on obi.\n\nCoverage: Explicitly observe U/M both.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_instr_prot\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_instr_prot_legal\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_prot_iside_legal\n\nCOV: ???",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Misc",
        "Sub Feature": "DataProt",
        "Feature Description": "\"prot[2:1]\nUser/Application (2\u2019b00), Supervisor (2\u2019b01), Reserved (2\u2019b10), Machine (2\u2019b11)\nThis matches the privilege levels from [RISC-V-PRIV].\"",
        "Verification Goal": "Track prot[2:1] on data loads/stores, observe retirements on rvfi, ensure the effective privilege mode of the retirement matches what was used on obi.\n\nCoverage: Explicitly observe U/M both.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_data_prot\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_data_prot_legal\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_prot_dside_legal\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_data_prot_equal\n\nCOV: ???",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Misc",
        "Sub Feature": "DbgProt",
        "Feature Description": "Since dmode execs as mmode, and obi has corresponding signals, the relationship should be visible on obi.",
        "Verification Goal": "When obi has a transaction with `dbg` high, check that `prot[2:1]` is M-mode on I-side, and \"effective\" mode on D-side.\n\nNote: Consider checking before MPU.\n\nCoverage: Observe U-/M-mode on D-side.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dbg_prot_iside\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dbg_prot_dside\n\nCOV: ???",
        "Comment": ""
    },
    {
        "Requirement Location": "privspec",
        "Feature": "CSRs",
        "Sub Feature": "IllegalAccess",
        "Feature Description": "\"Attempts to access a CSR without appropriate privilege level [\u2026] also raise illegal instruction exceptions\"",
        "Verification Goal": "Try all kinds of accesses (R, W, RW, S, C, \u2026) to all M-level CSRs while in U-level; ensure illegal instruction exception happens.\n\n(Hint: Assert RVFI vs csr[9:8])\n\nFunctional coverage can do a full cross of modes vs all CSRs.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_illegal_csr_access\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_mode_csraddr\n\nDTC: cv32e40s/tests/programs/custom/csr_priv_gen_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "AccessLevel",
        "Feature Description": "\"The next two bits (csr[9:8]) encode the lowest privilege level that can access the CSR.\"",
        "Verification Goal": "Try all kinds of accesses to all implemented M-level and U-level CSRs while in M-mode and U-mode (cross), ensure appropriate access grant/deny.",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "COV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_mode_csraddr",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "Warl",
        "Feature Description": "U-level CSRs may have WARL fields.",
        "Verification Goal": "(There is only JVT, and must be handled by the Zc vplan. Link to cov here still.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\nCOV: ???",
        "Comment": "Waiting for Zc vplan linkage"
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "MisaU",
        "Feature Description": "\"The \u201cU\u201d and \u201cS\u201d bits will be set if there is support for user and supervisor modes respectively.\"",
        "Verification Goal": "Read misa and see that \"U\" is always on.\n\nCoverage: Ensure actual csr read instruction read misa.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_misa_bits\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_csrreadwrite_mode_umodecsrs\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "MisaN",
        "Feature Description": "\"N   Tentatively reserved for User-Level Interrupts extension\"",
        "Verification Goal": "Read misa and see that \"N\" is always off.\n\nCoverage: Ensure actual csr read instruction read misa.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_misa_bits\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_csrreadwrite_mode_umodecsrs\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "UserExtensions",
        "Feature Description": "\"If both XS and FS are hardwired to zero, then SD is also always zero.\"\n\n\"In systems without additional user extensions requiring new state, the XS field is hardwired to zero.\"\n\n\"If neither the F extension nor S-mode is implemented, then FS is hardwired to zero.\"\n\nNone of those 3 are implemented, so they should all be zero.",
        "Verification Goal": "Check that mstatus {XS, FS, SD} are all 0.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_umode_extensions\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "MscratchReliable",
        "Feature Description": "\"the OS can rely on holding a value in the mscratch register while the user context\nis running.\"",
        "Verification Goal": "Check that mscratch never changes in U-mode.\n\n(CLIC vplan must handle \"mscratchcsw\" and \"mscratchcswl\", but link to coverage of that here too.)\n\nCoverage: See that mscratch is attempted written from umode.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mscratch_reliable\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_mscratch_changing\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_csrreadwrite_mode_umodecsrs\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "Mcsratchcsw",
        "Feature Description": "The clic spec introduces \"conditional swapping\" of mscratch.",
        "Verification Goal": "(Relevant user-mode related functionality must be handled by the CLIC vplan. Link to cov here still)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\nCOV: ???",
        "Comment": "Waiting for CLIC vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "MppValues",
        "Feature Description": "\"xPP fields are WARL fields that can hold only privilege mode x and any implemented privilege\nmode lower than x\"\n\n\"M-mode software can determine whether a privilege mode is implemented by writing that  mode to MPP then reading it back.\"",
        "Verification Goal": "Checking: Check that MPP can hold \"M\" and \"U\" and that it can hold nothing else.\n\nCoverage: Write and read instrs with each 2-bit permutation.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mpp_mode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_mpp_umode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_mpp_mmode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.gen_try_goto_mode[*].cov_try_goto_mode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.gen_try_goto_mode[*].cov_write_mpp",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "SppValues",
        "Feature Description": "\"If privilege mode x is not implemented, then xPP must be hardwired to 0.\"",
        "Verification Goal": "Check that SPP is always 0.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_spp_zero",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "MedelegMideleg",
        "Feature Description": "\"In systems without S-mode, the medeleg and mideleg registers should not exist.\"",
        "Verification Goal": "Attempt access to these CSRs.\n\nCoverage: Instrs attempt (R/W) access.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_medeleg_mideleg\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_csrreadwrite_mode_umodecsrs\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "CSRs",
        "Sub Feature": "Mcounteren",
        "Feature Description": "\"In systems with U-mode, the mcounteren must be implemented\"",
        "Verification Goal": "Attempt access to this CSR. (See Counters section below too.)\n\nCoverage: Instrs attempt (R/W) access.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mcounteren_access\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "n-ext",
        "Feature": "CSRs",
        "Sub Feature": "NExt",
        "Feature Description": "N-extension CSRs used to be supported earlier in the legacy of the core's source code.",
        "Verification Goal": "Check that the old N-ext CSRs are not accessible (ustatus, uie, utvec, uscratch, uepc, ucause, utval, uip), and traps upon access attempts.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_next_csrs\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_mode_csraddr\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "manual",
        "Feature": "CSRs",
        "Sub Feature": "Jvt",
        "Feature Description": "The vector table jump CSR is accessible and effective in U-mode. \"Smstateen\" applies. Both CSR access and instruction execution is affected.",
        "Verification Goal": "(Zc vplan should be responsible, but link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_jvt_access\n\nCOV: ???",
        "Comment": "Waiting for Zc vplan linkage"
    },
    {
        "Requirement Location": "privspec",
        "Feature": "Traps",
        "Sub Feature": "SoftwareInterrupts",
        "Feature Description": "U-mode software interrupts are not supported.",
        "Verification Goal": "Check that the zero-bits in `mie` and `mip` are always zero, and mcause is never S/U-mode software interrupt.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_softwareinterrupts_zeromie\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_softwareinterrupts_zeromip\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_softwareinterrupts_mcausemode\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "TrapMpp",
        "Feature Description": "\"When a trap is taken from privilege mode y into privilege mode x, [\u2026] xPP is set to y.\"",
        "Verification Goal": "Checking: Be in mode y, observe exception and interrupt, check MPP is mode y.\n\nCover: Cross U/M with Exc/Int.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_trap_mpp_exception\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_trap_mpp_general\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_trap_mpp_debug\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_mpp_excint",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "HigherEnabled",
        "Feature Description": "\"Interrupts for higher-privilege modes, y>x ,are always globally enabled regardless of the setting of the global yIE bit for the higher-privilege mode.\"",
        "Verification Goal": "(Responsibility of Interrupts and Clic vplans. Link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\nCOV: ???",
        "Comment": "Waiting for interrupts vplans"
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "HigherDisable",
        "Feature Description": "\"Higher-privilege-level code can use separate per-interrupt enable bits to disable selected higher-privilege-mode interrupts before ceding control to a lower-privilege mode.\"",
        "Verification Goal": "(Responsibility of Interrupts and Clic vplans. Link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\nCOV: ???",
        "Comment": "Waiting for interrupts vplans"
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "HigherNone",
        "Feature Description": "\"A higher-privilege mode y could disable all of its interrupts before ceding control to a lower-privilege mode\"",
        "Verification Goal": "(Responsibility of Interrupts and Clic vplans. Link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for interrupts vplans"
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "LowerLevel",
        "Feature Description": "\"Interrupts for lower-privilege modes, w<x, are always globally disabled regardless of the setting of any global wIE bit for the lower-privilege mode.\"",
        "Verification Goal": "(Does not apply to U-mode.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": "Waiting for interrupts vplans"
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "ToMmode",
        "Feature Description": "\"An interrupt i will trap to M-mode (causing the privilege mode to change to M-mode) [...]\"",
        "Verification Goal": "Ensure that whenever an interrupt is taken, it is handled in M-mode.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_interrupt_mmode",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "MretMpp",
        "Feature Description": "\"When executing an xRET instruction, supposing xPP holds the value y [\u2026] the privilege mode is changed to y\"",
        "Verification Goal": "Be in M-mode, execute mret with MPP as U-mode and as M-mode, ensure correct priv mode being executed in.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_from_mpp_umode\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_from_mpp_mmode",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "MretLeastPrivileged",
        "Feature Description": "\"When executing an xRET instruction [...] xPP is set to the least-privileged supported mode (U if U-mode is implemented, else M)\"",
        "Verification Goal": "Be in M-mode, execute mret, ensure that MPP is set to U-mode.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_to_mpp\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "MretMprv",
        "Feature Description": "\"When executing an xRET instruction [...] If xPP=\u0338M, xRET also sets MPRV=0.\"",
        "Verification Goal": "Be in M-mode, have xPP=U, execute mret, ensure that MPRV is set to 0.\n\nConversely, when xPP=M, MPRV does not exhibit such an effect upon MPRV.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_mprv_writemstatus_simplified\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_mprv_writempp\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_mprv_writestate\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_mprv_poststate\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mprv_poststate",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "Mepc",
        "Feature Description": "\"xRET sets the pc to the value stored in the xepc register.\"",
        "Verification Goal": "(Assumed to be covered by the exceptions vplan. Should apply regardless of privilege mode. Link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for exceptions vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Traps",
        "Sub Feature": "TrapsMmode",
        "Feature Description": "\"By default, all traps at any privilege level are handled in machine mode,\"",
        "Verification Goal": "Observe traps (interrupts and exceptions) getting triggered while in M-mode and U-mode, ensure the handler always starts in M-mode.\n\nCoverage: See rvfi_valid with exception/interrupt, while previous rvfi_valid was U/M. (Works in conjunction with \"TrapMpp\".)",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_traps_mmode\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_interrupt_mmode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_umode_intr\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_umode_notrap\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_prevmode_excint\n\nDTC: cv32e40s/tests/programs/custom/interrupt_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "privspec",
        "Feature": "Instructions",
        "Sub Feature": "WfiExecute",
        "Feature Description": "\"When TW=0, the WFI instruction may execute in lower privilege modes when not prevented for some other reason.\"",
        "Verification Goal": "Be in U-mode, have mstatus.TW=0, execute a WFI, ensure operation works as normal.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_wfi_normal",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Instructions",
        "Sub Feature": "WfiIllegal",
        "Feature Description": "\"When TW=1, then if WFI is executed in any less-privileged mode, and it does not complete within an implementation-specific, bounded time limit, the WFI instruction causes an illegal instruction exception.\"\n\n\"The time limit is set to 0 for CV32E40S.\"",
        "Verification Goal": "Be in U-mode, have mstatus.TW=1, execute a WFI, ensure illegal instruction exception occurs.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_wfi_illegal\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Instructions",
        "Sub Feature": "Ecall",
        "Feature Description": "\"The ECALL [...]. When executed in U-mode [...] it generates an environment-call-from-U-mode\nexception [...], and performs no other operation.\"\n\n\"The mcause register [...]. When a trap is taken into M-mode, mcause is written with a code indicating the event that caused the trap.\"",
        "Verification Goal": "Be in U-mode, execute ECALL, ensure that an exception is taken and mcause is set correctly.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ecall_umode_trap\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ecall_umode_exception\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ecall_umode_cause\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ecall_umode_poststate\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Instructions",
        "Sub Feature": "Ebreak",
        "Feature Description": "(See ebreak under the debug feature section.)",
        "Verification Goal": "Be in U-mode, execute ECALL, ensure that an exception is taken and mcause is set correctly.",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Instructions",
        "Sub Feature": "Mret",
        "Feature Description": "\"An xRET instruction can be executed in privilege mode x or higher\"",
        "Verification Goal": "Be in U-mode, execute MRET, ensure that it does not execute like it does in M-mode: Raise illegal exception, priv mode goes to M and not MPP, MPP becomes U, MPRV is unchanged.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_umode_exception\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_umode_nextmode\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_umode_mpp\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mret_umode_mprv\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Instructions",
        "Sub Feature": "CustomInstr",
        "Feature Description": "\"The subspace of the SYSTEM major opcode shown in Figure 3.30 is designated for custom use.\"\n\n\"Unprivileged or User-Level\"\n\n(40s has no such thing.)",
        "Verification Goal": "Execute custom SYSTEM \"Unprivileged or User-Level\" instructions, ensure they are illegal instructions.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_custom_instr\n\nDTC: cv32e40s/tests/programs/custom/custom_priv_gen_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "40p",
        "Feature": "Instructions",
        "Sub Feature": "Uret",
        "Feature Description": "The uret instruction existed earlier in the core's history, but no longer exists.",
        "Verification Goal": "Executing uret gives an illegal instruction exception.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_uret\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "privspec",
        "Feature": "EffectiveMode",
        "Sub Feature": "ModifyOff",
        "Feature Description": "\"When MPRV=0, loads and stores behave as normal, using the translation and protection mechanisms of the current privilege mode.\"",
        "Verification Goal": "(Handled by \"Prot\" items above. PMA/PMP specifics must also be handled by respective vplans.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "EffectiveMode",
        "Sub Feature": "ModifyOn",
        "Feature Description": "\"When MPRV=1, load and store memory addresses are translated and protected, and endianness is applied, as though the current privilege mode were set to MPP\"",
        "Verification Goal": "(Handled by \"Prot\" items above. PMA/PMP specifics must also be handled by those vplans.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "EffectiveMode",
        "Sub Feature": "ModifyIside",
        "Feature Description": "\"Instruction address-translation and protection are unaffected by the setting of MPRV.\"",
        "Verification Goal": "(Handled by \"Prot\" items above. PMA/PMP specifics must also be handled by those vplans.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "EffectiveMode",
        "Sub Feature": "UmodeUnmodified",
        "Feature Description": "Both mret and dret going to umode sets MPRV to 0.",
        "Verification Goal": "Check that umode never can happen together with MPRV being high.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_umode_unmodified",
        "Comment": ""
    },
    {
        "Requirement Location": "privspec",
        "Feature": "Counters",
        "Sub Feature": "McounterenClear",
        "Feature Description": "\"When the CY, TM, IR, or HPMn bit in the mcounteren register is clear, attempts to read the cycle, time, instret, or hpmcountern register while executing in S-mode or U-mode will cause an illegal instruction exception.\"",
        "Verification Goal": "Attempt to read all of those from U-mode while the corresponding bit is 0, ensure illegal instruction exception happens.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.gen_mcounteren_clear[*].a_check\n\nDTC: cv32e40s/tests/programs/custom/mcounteren_priv_gen_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Counters",
        "Sub Feature": "McounterenSet",
        "Feature Description": "\"When one of these bits is set, access to the corresponding register is permitted in the next implemented privilege mode (S-mode if implemented, otherwise U-mode).\"",
        "Verification Goal": "Check that mcounteren is MRW WARL(0x0).\n\nCoverage: \"mcounteren\" attempt written from M/U mode, \"corresponding register\" attempted read/write from M/U mode. (Let CSRs or Counters vplan have the responsibility, but \"link to coverage\" here.)",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mcounteren_zeros",
        "Comment": ""
    },
    {
        "Requirement Location": "debug",
        "Feature": "Debug",
        "Sub Feature": "TriggersAccess",
        "Feature Description": "\"The trigger registers, except scontext and hcontext, are only accessible in machine and Debug Mode to prevent untrusted user code from causing entry into Debug Mode without the OS\u2019s permission.\"",
        "Verification Goal": "(Exceptions vplan should handle this. Link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???\n\nDTC: cv32e40s/tests/programs/custom/privilege_test/",
        "Comment": "Waiting for exceptions vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "EbreakuOff",
        "Feature Description": "\"ebreak instructions in U-mode behave as described in the Privileged Spec.\"",
        "Verification Goal": "Have dcsr.ebreaku=0, be in U-mode, execute ebreak, ensure \"normal\" ebreak behavior and no debug entry.\n\nNote: Only need to check that correct exception occurs, priv spec exception details should be part of the Exceptions vplan.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_off_cause\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_off_exception\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_off_nodebug\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_off_nodebugcause\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_off_trap\n\nDTC: cv32e40s/tests/programs/custom/debug_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "EbreakuOn",
        "Feature Description": "\"ebreak instructions in U-mode enter Debug Mode.\"",
        "Verification Goal": "Have dcsr.ebreaku=1, be in U-mode, execute ebreak, ensure debug entry happens instead of \"normal\" ebreak behavior.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_on_dbgtrap\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_on_rvfivalid\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_ebreaku_on_noexception\n\nCOV: ???\n\nDTC: cv32e40s/tests/programs/custom/debug_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "Mcontrol6Umode0",
        "Feature Description": "\"When set, enable this trigger in U-mode.\"\n\nWith \"mcontrol6.u=0\" trigger condition should not be acted upon.",
        "Verification Goal": "(Is the responsibility of the debug/triggers vplan. Link to coverage here too.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "Mcontrol6Umode1",
        "Feature Description": "\"When set, enable this trigger in U-mode.\"\n\nWith \"mcontrol6.u=1\" trigger condition should be acted upon.",
        "Verification Goal": "(Is the responsibility of the debug/triggers vplan. Link to coverage here too.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "EtriggerUmode0",
        "Feature Description": "\"When set, enable this trigger for exceptions that are taken from U mode.\"\n\nWith \"etrigger.u=0\" trigger condition should not be acted upon.",
        "Verification Goal": "(Is the responsibility of the debug/triggers vplan. Link to coverage here too.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "EtriggerUmode1",
        "Feature Description": "\"When set, enable this trigger for exceptions that are taken from U mode.\"\n\nWith \"etrigger.u=1\" trigger condition should be acted upon.",
        "Verification Goal": "(Is the responsibility of the debug/triggers vplan. Link to coverage here too.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "TriggersMmode",
        "Feature Description": "(Same as Mcontrol6 and Triggers above, but for \".m\" bit.)",
        "Verification Goal": "(Is the responsibility of the debug/triggers vplan. Link to coverage here too.)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Other",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "ExecuteMmode",
        "Feature Description": "\"All operations are executed with machine mode privilege [\u2026]\"",
        "Verification Goal": "Ensure that all rvfi retirements in D-mode also shows M-mode.\nAdditionally, check that loads/stores act as if M-mode and that CSRs are accessible as in M-mode.\n\nNote: Mind ExecuteMprven below.\n\nCoverage: Load/store in dmode, csr access in dmode.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dmode_mmode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_dmode_csrreadwrite\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_dmode_loadstore\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_dmode_mpp",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "ExecuteMprven",
        "Feature Description": "\"[...] except that MPRV in mstatus may be ignored according to mprven.\"",
        "Verification Goal": "Check that \"mprven\" is tied \"1\".\n\nNote: Mind ExecuteMmode above.\n\nCoverage: Cross \"mprven\" vs \"MPRV\" vs D-mode vs load/store/instr.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Other",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_mprven_tied\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_dmode_mprv\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_dmode_loadstore_mprv_mpp",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "Relaxedpriv",
        "Feature Description": "\"Full permission checks, or a relaxed set of permission checks, will apply according to relaxedpriv.\"",
        "Verification Goal": "(This field is in a DM registers and pertains to subsystem integration, not the core itself.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "UnspecifiedBehav",
        "Feature Description": "\"Almost all instructions that change the privilege mode have unspecified behavior. This includes ecall, mret, sret, and uret.\"",
        "Verification Goal": "(The behavior is specified in the user manual. But the effects are debug-specific and not user-mode-specific so it is the responsibility of the debug vplan. Link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "ResumePriv",
        "Feature Description": "\"When a hart resumes [...] The current privilege mode and virtualization mode are changed to that specified by prv and v.\"\n\n\"prv [...] A debugger can change this value to change the hart\u2019s privilege mode when exiting Debug Mode.\"\n\n\"When dret is executed, [...] normal execution resumes at the privilege set by prv.\"",
        "Verification Goal": "Transition out of D-mode, ensure that executions starts in the same privilege mode as was indicated in dcsr.prv (dcsr.prv=M and dcsr.prv=U).\n\nCoverage: Observe, spesifically, return to U/M each.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dret_prv\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_dret_prv_u\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_dret_prv_m\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_prv_u\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_prv_m\n\nDTC: cv32e40s/tests/programs/custom/debug_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "ResumeMprv",
        "Feature Description": "\"When a hart resumes: [...] If the new privilege mode is less privileged than M-mode, MPRV in mstatus is cleared.\"",
        "Verification Goal": "Transition out of D-mode (dret) into U-mode, while mstatus.mprv=1, ensure that when execution continues outside D-mode that mstatus.mprv=0.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dret_mprv_umode\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dret_mprv_prv\n\nA: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_dret_mprv_csr\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cov_umode_mprv\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.cg_inst.x_dret_mprv_prv\n\nDTC: cv32e40s/tests/programs/custom/debug_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "PrvEntry",
        "Feature Description": "\"prv Contains the privilege mode the hart was operating in when Debug Mode was entered.\"",
        "Verification Goal": "Transition into D-mode from M-mode and U-mode, ensure dcsr.prv contains the privilege mode that was running before D-mode.\n\nCoverage: Observe, spesifically, dcsr.prv set to to U/M each.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_prv_entry\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_prv_entry_u\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_prv_entry_m\n\nDTC: cv32e40s/tests/programs/custom/debug_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "PrvSupported",
        "Feature Description": "\"Not all privilege modes are supported on all harts. If the encoding written is not supported or the debugger is not allowed to change to it, the hart may change to any supported privilege mode.\"",
        "Verification Goal": "Write unsupported modes to dcsr.prv, ensure the value read back is unchanged from the previous value.\n\nCoverage: Observe attempts to write illegal/legal values.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.a_prv_supported\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_prv_supported_umode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_assert_i.cov_prv_supported_mmode\n\nCOV: uvmt_cv32e40s_tb.dut_wrap.cv32e40s_wrapper_i.umode_cov_i.gen_try_set_prv[*].cov_try_set_prv\n\nDTC: cv32e40s/tests/programs/custom/debug_priv_test/",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "NativeTriggers",
        "Feature Description": "\"Triggers can be used for native debugging when action =0. If supported by the hart and desired by the debugger, triggers will often be programmed to have m=0 so that when they fire they cause a breakpoint exception to trap to a more privileged mode.\"",
        "Verification Goal": "(Must be covered by the debug/triggers vplan. But link to coverage here too.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "A: ???\n\nCOV: ???",
        "Comment": "Waiting for debug vplan linkage."
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "Mprven0Simulate",
        "Feature Description": "\"If hardware ties mprven to 0 then the external debugger is expected to simulate all the effects of MPRV, including any extensions that affect memory accesses. For these reasons it is recommended to tie mprven to 1.\"",
        "Verification Goal": "(\"mprven\" is not tied 0.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "Mprven0Ignore",
        "Feature Description": "\"mprven 0: MPRV in mstatus is ignored in Debug Mode.\"",
        "Verification Goal": "(mprven is tied \"1\". Handled by ExecuteMprven above.)",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "(mprven is tied \"1\". Handled by ExecuteMprven above.)",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "(mprven is tied \"1\". Handled by ExecuteMprven above.)",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "(mprven is tied \"1\". Handled by ExecuteMprven above.)",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Debug",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "(mprven is tied \"1\". Handled by ExecuteMprven above.)",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    },
    {
        "Requirement Location": " -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- END -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",
        "Feature": "Debug",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "(mprven is tied \"1\". Handled by ExecuteMprven above.)",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "Comment": ""
    }
]