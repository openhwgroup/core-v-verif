Requirement Location,Feature,Sub Feature,Feature Description,Verification Goal,Pass/Fail Criteria,Test Type,Coverage Method,Link to Coverage
"CV32E40S User manual, 0.4.0",Security Alerts,alert_major_o ,"The alert_major_o signal shall be 1 for every cycle that the following critical security issues occur and persist:
register file ECC error
Hardened PC error
Hardened CSR error
Interface Integrity error","Verify that the alert_major_o is high for 1 cycle when the specified errors occur. 
Note: this should be logically impossible in formal, will likely require forcing core signals to provoke",Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,,,"Verify that the alert_major_o is low in any non-error case.

This should be done by creating a scoreboard check/assert for no alerts, that can be explicitly configured off when doing xsecure checking. Also run through formal. This check is assumed but not mentioned for every feature in this plan",Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,alert_minor_o,"A 1-cycle high pulse shall be generated on alert_minor_o for the following critical security issues:
See list in the User Manual, ""Security Alerts""",Verify that the alert_minor_o is high for 1 cycle when the specified errors occur. ,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,,,Verify that the alert_minor_o is low in any non-error case. Check similarly to alert_major_o,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,alert signals are glitchless,"Both alert signals shall be created in a glitchless manner, coming directly from flip flops",Verify the creation. Can be verified by finding the correct flop and asserting they are equal to output signal. This requirement might be better covered as core assert,,,,
,Data Independent Timing,configurable,Data independent timing is enabled by setting the dataindtiming bit in the cpuctrl CSR.,"Verify functionality is enabled/disabled by setting/clearing the bit

Might be just a coverage using other asserts from this section",Assertion Check,Constrained-Random,Functional Coverage,
,,Reset value: default off,Data independent timing shall be default disabled,Verify CSR value at reset,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Branch timing,"Branches shall take 3 cycles, independent of the branch being taken. 
Exception: branches to a non-word-aligned non-RVC instruction are allowed an extra cycle(4 cycles)",Verify execution time. Coverage needed to show more than one variation,Assertion Check,Constrained-Random,Functional Coverage,
,,DIV/REM timing,DIV/REM instructions shall always take 35 cycles,Verify execution time. Coverage needed to show more than one variation,Assertion Check,Constrained-Random,Functional Coverage,
,,timing exception,"Jumps, branches, and instruction fences to a non-word-aligned non-RVC instruction are allowed to take an extra cycle.",Keep in mind when verifying strict timing,N/A,N/A,N/A,
,Dummy Instruction Insertion,Overall consideration,,"Verifying the dummy inastructions will be complicated, as these are instructions that should be verified as such, without appearing on RVFI and the support of the ISS. Consider making these part of the RVFI subop interface.",N/A,N/A,N/A,
,,configurable,Dummy instructions are enabled via the rnddummy bit in the cpuctrl CSR.,"Verify functionality is enabled/disabled by setting/clearing the bit

Might be just a coverage using other asserts from this section",Assertion Check,"ENV capability, not specific test",Functional Coverage,
,,,The frequency of injected instructions is tuned via the rnddummyfreq bits in the cpuctrl CSR.,"Verify statistical occurrence of dummy instructions
End of simulation comparison of occurance, lower/upper limit",Assertion Check,Constrained-Random,Functional Coverage,
,,Reset value: default off,Dummy instructions shall be default disabled,Verify CSR value at reset,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,LFSRx CSR,"reset, read/write, ",Expand CSR test to include these,Check against RM,Directed Non-Self-Checking,Functional Coverage,
,,LFSRx lockup reset,reset to default,"Verify a lockup is detected (covered under alert_minor_o), and is reset to default",Assertion Check,Constrained-Random,Assertion Coverage,
,,Dummy instuctions inserted in IF stage,Dummy instruction insertion shall be performed in the IF stage.,"Detect the apperance of dummy instructions, and verify that they appear at IF

assert when random: opcode within (dummy)",Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,"Opcodes picked randomly based on LFSR0, picked from add, mul, and, bltu",Dummy instructions shall be pseudo randomly generated based on LFSR0.,"Hard to verify. 
Ideas:
report dummy to SB(new agent) and verify random distribution
Set values in LFSR0 and check dummy picked(requires intimate knowledge of implementation)",Any/All,"ENV capability, not specific test",N/A,
,,BLTU dummy destination,"The dummy bltu shall, if taken, branch to the instruction that would have been executed if no dummy instruction had been inserted.","Verify that program always continues at the next instruction

Find a way to cover bltu insertion, and taken/not taken",Other,Constrained-Random,Functional Coverage,
,,"Source registers, destination register and data for dummy instructions",Source registers shall be picked randomly from x0-x31/x0-x15,"Verify statistical distribution of source registers for dummy instructions

verify by SB at end of test",Other,Other,Functional Coverage,
,,,Information from RS1 and RS2 shall be used to trigger pipeline stalls as normal,Verify apparently normal behaviour,Check against RM,Constrained-Random,Functional Coverage,
,,,Actual data operands used shall come from LFSR1 and LFSR2,Verify LFSRx used as operands,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,,Destination register shall be X0,Verify destination register for dummy instructions,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,MCYCLE performance counter updated as normal,Dummy instructions shall update MCYCLE as if they were normal instructions,Verify affect on MCYCLE ,Other,Constrained-Random,Functional Coverage,
,,MINSTRET performance counters shall not count the dummy instructions,Dummy instructions shall not affect MINSTRET counters,Verify no update of MINSTRET for dummy instructions,Check against RM,Constrained-Random,Functional Coverage,
,,read related CSRs,"cpuctrl, secureseed0, secureseed1 and secureseed2 shall return 0 upon a read.",Verify reads always return 0,Check against RM,Directed Non-Self-Checking,Functional Coverage,
,,related CSRs accessible by machine mode only,"cpuctrl, secureseed0, secureseed1 and secureseed2 shall be accessible in machine mode only",Verify machine mode only. Cross with user mode Vplan?,Check against RM,Directed Non-Self-Checking,Functional Coverage,
,Random Instruction for Hint,Configurable,Hint is enabled via the rndhint bit in the cpuctrl CSR.,"Verify functionality is enabled/disabled by setting/clearing the bit

Might be just a coverage using other asserts from this section",Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Reset value: default off,Hint shall be default disabled,Verify CSR value at reset,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Random instruction selected like dummy instruction,generation shall be the same as for dummy instructions,Verify with Dummy Instruction verification,N/A,N/A,Functional Coverage,
,,retiring hint affects minstret,A retiring hint instruction (no matter if it is replaced by a random instruction or not) shall lead to a minstret increment,Verify minstret like normal,Check against RM,Constrained-Random,Functional Coverage,
,,Retiring hint appears as slt on RVFI,A retiring hint instruction (no matter if it is replaced by a random instruction or not) shall be reported on RVFI as slt,"verify no difference if hint replaced by random instruction

Cover insertion of replacement instruction",Check against RM,Constrained-Random,Functional Coverage,
,Register file ECC,Always on,Ecc checking shall always be enabled,Do not create any parameters or disables for checks for this feature,N/A,N/A,N/A,
,,Error detection,Detection of 1-bit and 2-bit errors per 32-bit register,"Assert that a mismatch between data and syndrome is detected for each register. Will likely require forcing of errors in rtl signals. Make sure all 0's and all 1's item below is covered.

Explore formal verification of all possible 1- and 2-bit errors",Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,No suppression,ECC checking shall be performed for every actual register file read and the check result shall never be suppressed (also not if a register file bypass value is used instead of the value from the register file).,Assert that any mismatch on a read results in an alert.,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Syndrome update,The ECC syndrome shall be updated for every register file write,Assert every write results in a correct syndrome,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Reset value,Upon reset the register file general purpose registers shall be set to 32â€™b0 and the syndromes shall be set to a matching ECC value (such that no error is triggered by default).,Assert reset value is legal,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Syndrome non-readable,No explicit direct access mechanism shall be provided for the register file syndromes,"Code inspection: check the register file, and make sure there are no signals from the register syndrome out of the module",N/A,N/A,N/A,
,,All 1's or all 0's is an error,The ECC codes shall be such that a value of all 1s or all 0s for a 32-bit word and its associated syndrome represent ECC errors.,"Should be part of the scheme, checked under ""Error Detection"". Forcing values in a directed test should be considered if time allows",N/A,N/A,N/A,
,Hardened PC,Detect erroneous PC values in the IF stage,Any glitch in the IF stage PC for sequential execution shall result in a alert_major_o,"Drive a forced error in the IF stage PC and verify that the alert_major_o is driven.

NOTE: this is set up as a directed simulation test, as that seems the easiest way to verify. Assertion based should be considered before starting verification, as this would be preferrable if time allows.",Self Checking Test,Directed Self-Checking,Testcase,
,,,"Any glitch in the IF stage PC for non-sequential execution shall result in a alert_major_o

Jumps and branches are covered, reset, exceptions, interrupt and debug entry is not","Drive a forced error in the IF stage PC and verify that the alert_major_o is driven.

NOTE: this is set up as a directed simulation test, as that seems the easiest way to verify. Assertion based should be considered before starting verification, as this would be preferrable if time allows.",Self Checking Test,Directed Self-Checking,Testcase,
,,Disabled/enabled via cpuctrl.pcharden,"(CV32E40S, SECURE = 1) If cpuctrl.pcharden = 1, then the PC hardening feature shall be enabled.","Disable the control bit, rerun tests above, verify no alert",Self Checking Test,Directed Self-Checking,Testcase,
,Hardened CSR,Shadow registers to ensure integrity of important CSR's,"If a CSR is not equal to the bit-wise complement of its shadow CSR an alert shall be raised on alert_major_o.

Hardened CSR's are listed In the User Manual ","Assert that a mismatch between CSR and shadow register results in a alert_major_o for all hardened CSRs.

Force errors in the shadow register and the CSR separately, and verify alert. ",Assertion Check,Directed Non-Self-Checking,Assertion Coverage,
,Interface Integrity,OBI Parity signals Out,"Parity signals shall be provided for the OBI handshake signals as specified

A bit will be added in CPUCTRL to turn off integrity related faults","Utilise asserts from obi assertion set

Verify control bit functionality

Assert correct config",Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,OBI parity signals In,An alert_major_o shall be raised with parity errors in the incoming OBI bus interface,Assert that any parity mismatch causes an alert_major_o,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,OBI checksum signals Out,"Checksum signals (instr_achk_o and data_achk_o) shall be provided for the OBI address phase signals as specified

some checksum signals will be redefined to even parity",Utilise asserts from obi assertion set,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,OBI checksum signals In,"An alert_major_o shall be raised with checksum errors in the incoming OBI bus interface

some checksum signals will be redefined to even parity",Assert that any checksum mismatch causes an alert_major_o,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,Instruction parity/checksum faults causes exception,"Instruction parity/checksum faults shall pass together with the instruction data itself through the fetch stage and shall result in an instruction parity/checksum exception (i.e.exception code 0x31) only if the instruction is (attempted to be) executed.

Exception codes will change https://github.com/openhwgroup/cv32e40s/issues/235",Verify by making sure that parity/checksum errors are simulated and check against RM,Check against RM,Constrained-Random,Functional Coverage,
,,Load/store parity/checksum error causes NMI,Load/store parity/checksum faults shall be handled as load/store parity/checksum fault NMIs.,Verify by making sure that parity/checksum errors are simulated and check against RM,Check against RM,Constrained-Random,Functional Coverage,
,Bus Protocol Hardening,OBI protocol violation causes alert,Violations of the OBI address-before-response protocal shall result in an alert_major_o,Assert that breaches to the protocol results in an alert. A high rvalid without a preceding address phase shall cause an alert. Support logic from the OBI assertion set should be repurposed here.,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,Reduction of profiling infrastructure,CSRs to decode as illegal,"The following CSRs shall decode as illegal:
cycle, instret, cycleh, instreth, hpmcounter3-31, hpmcounterh3-31","Verify any instruction attempting to read or write these registers decode as illegal

Consider an assert if time allows",Check against RM,Constrained-Random,Functional Coverage,
,,CSRs to be hardwired to 0x0,"The following CSRs shall be hardwired to 0x0: 
mhpmcounteren3-31, mhpmcounterh3-31, mhpevent3-31",Assert these registers are always 0,Assertion Check,"ENV capability, not specific test",Assertion Coverage,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
,,,,,,,,
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- END -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------,,,,,,,,
