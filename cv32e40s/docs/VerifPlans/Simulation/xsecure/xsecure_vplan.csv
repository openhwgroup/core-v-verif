Requirement Location,Feature,Sub Feature,Feature Description,Verification Goal,Pass/Fail Criteria,Test Type,Coverage Method,Link to Coverage,,,,,,,,,,,,,,,,,
CV32E40S User manual v1.0.0,Security Alerts,alert_major_o,"The alert_major_o signal shall be 1 for every cycle that the following critical security issues occur and persist: 1) Register file indicates an ECC error, 2) hardened PC error, 3) hardened CSR error, 4) non-associated instruction interface integrity (parity/checksum) error, 5) non associated data interface integrity (parity/checksum) error, 6) instruction parity/checksum fault, 7) store parity/checksum fault NMI, 8) load parity/checksum fault NMI, and 9) bus protocol error.",Verify that alert_major_o is high whenever the previously listed errors occur. Provoking the errors require inserting glitches. The assertions are covered in the following subsections,See subsections,See subsections,See subsections,A: see subsections,,,,,,,,,,,,,,,,,
,,alert_major_o,major_alert_o is zero when there are no error cases triggering major_alert_o,"Verify that alsert_major_o is 0 in non-error cases by assuming no glitches. This should be done by creating a scoreboard check/assert for no alerts, that can be explicitly configured off when doing xsecure checking. Also run through formal. This check is assumed but not mentioned for every feature in this plan. ",Assertion check,"ENV capability, not specific test",Assertion Coverage,A: a_xsecure_security_alert_major,,,,,,,,,,,,,,,,,
,,alert_minor_o,"A 1-cycle high pulse shall be generated on alert_minor_o for the following critical security issues:
See list in the User Manual, ""Security Alerts""",Verify that the alert_minor_o is high for 1 cycle when the specified errors occur. ,Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_security_alert_lfsr0_lockup, a_xsecure_security_alert_lfsr1_lockup, a_xsecure_security_alert_lfsr2_lockup, a_xsecure_security_alert_non_nmi_exceptions, a_xsecure_security_alert_nmi_no_integrity, a_xsecure_security_set_nmi_when_obi_data_error",,,,,,,,,,,,,,,,,
,,alert_minor_o,major_alert_o is zero when there are no error cases triggering major_alert_o,Verify that the alert_minor_o is low in any non-error case. Check similarly to alert_major_o,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_security_alert_minor_reasons,,,,,,,,,,,,,,,,,
,,alert signals are glitchless,"Both alert signals shall be created in a glitchless manner, coming directly from flip flops",Code inspection: check that there is no logic inbetween the flops alert major and minor signals and the core's outputted signals alert_major_o and alert_minor_o,N/A,N/A,N/A,N/A,,,,,,,,,,,,,,,,,
,Data Independent Timing,Configurable,Data independent timing is enabled by setting the dataindtiming bit in the cpuctrl CSR.,Verify functionality is enabled/disabled by setting/clearing the bit,Coverage check,Constrained-Random,Functional coverage,"A: a_xsecure_dataindtiming_branch_timing_pc_hardening_disabled, a_xsecure_dataindtiming_branch_timing_pc_hardening_enabled, a_xsecure_dataindtiming_div_rem_timing. COV: c_xsecure_dataindtiming_branch_timing_off, c_xsecure_dataindtiming_core_div_rem_timing_off",,,,,,,,,,,,,,,,,
,,Reset value: default on,Data independent timing shall be default enabled,Verify CSR value at reset,Assertion check,"ENV capability, not specific test",Assertion Coverage,A:a_xsecure_dataindtiming_default_on,,,,,,,,,,,,,,,,,
,,Branch timing,"Branches shall take 3 cycles, independent of the branch being taken. Exception: branches to a non-word-aligned non-RVC instruction are allowed an extra cycle(4 cycles)","Verify execution time. Coverage needed to show more than one variation, with PC hardening enabled and disabled",Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_dataindtiming_branch_timing_pc_hardening_disabled,
a_xsecure_dataindtiming_branch_timing_pc_hardening_enabled",,,,,,,,,,,,,,,,,
,,DIV/REM timing,DIV/REM instructions shall always take 35 cycles,Verify execution time. Coverage needed to show more than one variation,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dataindtiming_div_rem_timing,,,,,,,,,,,,,,,,,
,,Timing exception,"Jumps, branches, and instruction fences to a non-word-aligned non-RVC instruction are allowed to take an extra cycle.",Keep in mind when verifying strict timing,N/A,N/A,N/A,N/A,,,,,,,,,,,,,,,,,
,Dummy Instruction Insertion,Overall consideration,,"Verifying the dummy instructions will be complicated, as these are instructions that should be verified as such, without appearing on RVFI and the support of the ISS. Consider making these part of the RVFI subop interface.",N/A,N/A,N/A,N/A,,,,,,,,,,,,,,,,,
,,Configurable,Dummy instructions are enabled via the rnddummy bit in the cpuctrl CSR.,Verify functionality is enabled/disabled by setting/clearing the bit. Might be just a coverage using other asserts from this section,Assertion Check,Constrained-Random,Functional Coverage,A: a_xsecure_dummy_instr_dont_generated_dummy_instr_if_dummy_setting_is_off. COV: c_xsecure_dummy_instr_generated_dummy_instr_if_dummy_setting_is_on. ,,,,,,,,,,,,,,,,,
,,Configurable,The frequency of injected instructions is tuned via the rnddummyfreq bits in the cpuctrl CSR.,Verify that the injected instructions is tuned by the randdummyfreq bits.,Assertion Check,Constrained-Random,Assertion Coverage,"A: a_xsecure_dummy_instr_frequency_4,
a_xsecure_dummy_instr_frequency_8,
a_xsecure_dummy_instr_frequency_16,
a_xsecure_dummy_instr_frequency_32,
a_xsecure_dummy_instr_frequency_64.",,,,,,,,,,,,,,,,,
,,Configurable,The frequency of injected instructions is tuned via the rnddummyfreq bits in the cpuctrl CSR.,"Verify statistical occurrence of dummy instructions, with an end of simulation comparison of occurance, lower/upper limit. At least verify that dummy instructions occur with a maximal periode of what is decided by the randdummyfreq signal.",Other,Constrained-Random,Assertion Coverage,"TODO: Verify statistically distribution. A: a_xsecure_dummy_instr_frequency_4,
a_xsecure_dummy_instr_frequency_8,
a_xsecure_dummy_instr_frequency_16,
a_xsecure_dummy_instr_frequency_32,
a_xsecure_dummy_instr_frequency_64.",,,,,,,,,,,,,,,,,
,,Reset value: default off,Dummy instructions shall be default disabled,Verify CSR value at reset,Assertion Check,"ENV capability, not specific test",Assertion Coverage,A: a_xsecure_dummy_default_off,,,,,,,,,,,,,,,,,
,,Dummy instuctions inserted in IF stage,Dummy instruction insertion shall be performed in the IF stage.,"Detect the apperance of dummy instructions, and verify that they appear at IF",Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dummy_instr_is_inserted_in_if_stage,,,,,,,,,,,,,,,,,
,,"Opcodes picked randomly based on LFSR0, picked from add, mul, and, bltu","Opcode of dummy instructions are either add, mul, and or bltu","Detect apperence of add, mul and bltu opcodes for dummy instructions, and no other type of operations. ",Assertion check,Constrained-Random,Functional coverage,"A: a_xsecure_dummy_instr_is_add_and_mul_or_btlu. COV: c_xsecure_dummy_instr_is_add,
c_xsecure_dummy_instr_is_and,
c_xsecure_dummy_instr_is_mul, c_xsecure_dummy_instr_is_bltu.",,,,,,,,,,,,,,,,,
,,"Opcodes picked randomly based on LFSR0, picked from add, mul, and, bltu",Dummy instructions shall be pseudo randomly generated based on LFSR0,Hard to verify. Ideas: report dummy to SB(new agent) and verify random distribution. Set values in LFSR0 and check dummy picked(requires intimate knowledge of implementation). At least verify that all the different types of dummy instructions occur.,Other,Constrained-Random,N/A,"TODO: Verify statistically distribution. COV: c_xsecure_dummy_instr_is_add, c_xsecure_dummy_instr_is_and, c_xsecure_dummy_instr_is_mul, c_xsecure_dummy_instr_is_bltu",,,,,,,,,,,,,,,,,
,,Branch instruction jump to the instruction that should have been executed if there was no dummy instructions,"The dummy bltu shall, if taken, branch to the instruction that would have been executed if no dummy instruction had been inserted.",Verify that program always continues at the next instruction,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dummy_instr_bltu_jumping.,,,,,,,,,,,,,,,,,
,,"Source registers, destination register and data for dummy instructions",Source registers shall be picked randomly from x0-x31/x0-x15,Verify statistical distribution of source registers for dummy instructions. verify by SB at end of test. At least verify that source registers can be either of the registers x0-x31,Other,Constrained-Random,N/A,"TODO: Verify statistically distribution. COV: c_xsecure_dummy_source_reg1, c_xsecure_dummy_source_reg2",,,,,,,,,,,,,,,,,
,,"Source registers, destination register and data for dummy instructions",Destination register shall be X0,Verify destination register for dummy instructions,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dummy_instr_destination_is_x0,,,,,,,,,,,,,,,,,
,,"Source registers, destination register and data for dummy instructions",Actual data operands used shall come from LFSR1 and LFSR2,Verify LFSRx used as operands,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dummy_instr_operands_from_LFSR1_and_LFSR2,,,,,,,,,,,,,,,,,
,,"Source registers, destination register and data for dummy instructions",Information from RS1 and RS2 shall be used to trigger pipeline stalls as normal,Verify apparently normal behaviour,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dummy_instr_load_dummy_stall,,,,,,,,,,,,,,,,,
,,MCYCLE performance counter updated as normal,Dummy instructions shall update MCYCLE as if they were normal instructions,Verify affect on MCYCLE ,Assertion check,Constrained-Random,Assertion coverage,A: a_xsecure_dummy_instr_updates_mcycle,,,,,,,,,,,,,,,,,
,,MINSTRET performance counters shall not count the dummy instructions,Dummy instructions shall not affect MINSTRET counters,Verify no update of MINSTRET for dummy instructions,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_dummy_instr_do_not_update_minstret,,,,,,,,,,,,,,,,,
,,read related CSRs,"secureseed0, secureseed1 and secureseed2 shall return 0 upon a read.",Verify reads always return 0,Check against RM,Directed Non-Self-Checking,N/A,DTC: test_secureseeds_show_zero_at_reads,,,,,,,,,,,,,,,,,
,,related CSRs accessible by machine mode only,"cpuctrl, secureseed0, secureseed1 and secureseed2 shall be accessible in machine mode only",Verify that they can be read in machine mode only,Check against RM,Directed Non-Self-Checking,N/A,DTC: test_ctrlcpu_and_secureseeds_accessable_in_machine_mode_only,,,,,,,,,,,,,,,,,
,,LFSRx lockup reset,reset to default,Verify a lockup is detected and is reset to default. This can also be triggered after generation of a hint instruction as well as after the generation of a dummy instruction,Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_dummy_hint_instr_LFSR0_lockup_reset,
a_xsecure_dummy_hint_instr_LFSR1_lockup_reset,
a_xsecure_dummy_hint_instr_LFSR2_lockup_reset.",,,,,,,,,,,,,,,,,
,,LFSR Bad Seed,Certain seeds should eventually lead to the LFSR locking up. (This is different from explicitly writing it to 0 and causing an immediate lockup.),"For all secureseed registers, write a value that eventually (but not immediately) leads to a lockup, and let the core run until that happens. (Could maybe be done with only a cover in formal, or with a simple directed test in sim, or both.)",Directed test,Directed Non-Self-Checking,Functional coverage,TODO:WARNING:silabs-robin,,,,,,,,,,,,,,,,,
,,Write to LFSR,"LFSR0, LFSR1, LFSR2 shall be seeded by CSR writes to secureseed0, secureseed1, and 
secureseed2 respectively.",Verify that writing to secureseedN seeds the LFRSN,Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_dummy_hint_instr_LFSR0_write_secureseed0_reg,
a_xsecure_dummy_hint_instr_LFSR1_write_secureseed1_reg,
a_xsecure_dummy_hint_instr_LFSR2_write_secureseed2_reg.",,,,,,,,,,,,,,,,,
,,LFSR update,"LFSRs shall be updated to their next value upon random instruction for dummy insertion. (Det står kun at LFSR skal oppdateres ved hint instruksjon, men de skal vel også oppdateres på dummy instruksjon, eller?)",Verify that the LFSRs are updated upon a dummy or hint instruction,Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_dummy_updates_lfsr0,
a_xsecure_dummy_updates_lfsr1,
a_xsecure_dummy_updates_lfsr2.",,,,,,,,,,,,,,,,,
,Random Instruction for Hint,Configurable,Hint is enabled via the rndhint bit in the cpuctrl CSR.,Verify functionality is enabled/disabled by setting/clearing the bit,Assertion check,Constrained-Random,Functional coverage,A: a_xsecure_hint_instr_dont_generated_hint_instr_if_hint_setting_is_off. COV: c_xsecure_hint_instr_generated_hint_instr_if_hint_setting_is_on,,,,,,,,,,,,,,,,,
,,Reset value: default off,Hint shall be default disabled,Verify CSR value at reset,Assertion check,"ENV capability, not specific test",Assertion Coverage,A: a_xsecure_hint_default_off,,,,,,,,,,,,,,,,,
,,Random instruction selected like dummy instruction,generation shall be the same as for dummy instructions: ,Verify with Dummy Instruction verification,See the following,See the following,See the following,N/A,,,,,,,,,,,,,,,,,
,,,"Opcode of hint instructions are either add, mul, and or bltu","Detect apperence of add, mul and, and bltu opcodes for hint instructions, and no other type of operations. ",Assertion check,Constrained-Random,Functional coverage,"A:.a_xsecure_hint_instr_is_add_and_mul_or_btlu. COV: c_xsecure_hint_instr_is_add,
c_xsecure_hint_instr_is_and,
c_xsecure_hint_instr_is_mul, c_xsecure_hint_instr_is_bltu.",,,,,,,,,,,,,,,,,
,,,Hint instructions shall be pseudo randomly generated based on LFSR0,Hard to verify. Ideas: report hint to SB(new agent) and verify random distribution. Set values in LFSR0 and check hint picked(requires intimate knowledge of implementation),Other,Constrained-Random,N/A,"TODO: Verify statistically distribution. COV: c_xsecure_hint_instr_is_add, c_xsecure_hint_instr_is_and, c_xsecure_hitn_instr_is_mul, c_xsecure_hint_instr_is_bltu",,,,,,,,,,,,,,,,,
,,,"The hint bltu shall, if taken, branch to the instruction that would have been executed if no hint instruction had been inserted.",Verify that program always continues at the next instruction,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_hint_instr_bltu_jumping,,,,,,,,,,,,,,,,,
,,,Source registers shall be picked randomly from x0-x31/x0-x15,Verify statistical distribution of source registers for hint instructions. verify by SB at end of test. At least verify that source registers can be either of the registers x0-x31,Other,Constrained-Random,Functional coverage,"TODO: Verify statistically distribution. COV:  c_xsecure_hint_source_reg1, c_xsecure_hint_source_reg2",,,,,,,,,,,,,,,,,
,,,Destination register shall be X0,Verify destination register for hint instructions,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_hint_instr_destination_is_x0,,,,,,,,,,,,,,,,,
,,,Actual data operands used shall come from LFSR1 and LFSR2,Verify LFSRx used as operands,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_hint_instr_operands_from_LFSR1_and_LFSR2,,,,,,,,,,,,,,,,,
,,,Information from RS1 and RS2 shall be used to trigger pipeline stalls as normal,Verify apparently normal behaviour,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_hint_instr_load_hint_stall,,,,,,,,,,,,,,,,,
,,retiring hint affects minstret,A retiring hint instruction shall lead to a minstret increment,Verify minstret like normal,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_hint_instructions_updates_minstret,,,,,,,,,,,,,,,,,
,,LFSR update,"LFSRs shall be updated to their next value upon random instruction for hint insertion. (Det står kun at LFSR skal oppdateres ved hint instruksjon, men de skal vel også oppdateres på dummy instruksjon, eller?)",Verify that the LFSRs are updated upon a dummy or hint instruction,Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_hint_updates_lfsr0,
a_xsecure_hint_updates_lfsr1,
a_xsecure_hint_updates_lfsr2.",,,,,,,,,,,,,,,,,
,,Retiring hint appears as slt on RVFI,A retiring hint instruction shall be reported on RVFI as slt,verify no difference if hint replaced by random instruction,Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_hint_instructions_reports_on_rvfi_as_slli,,,,,,,,,,,,,,,,,
,Register file ECC,Always on,Ecc checking shall always be enabled,Do not create any parameters or disables for checks for this feature,N/A,N/A,N/A,N/A,,,,,,,,,,,,,,,,,
,,No suppresion,ECC checking shall be performed for every actual register file read and the check result shall never be suppressed (also not if a register file bypass value is used instead of the value from the register file).,"Assert that any mismatch on a read results in an alert, if the error is of 1 or 2 bits.",Assertion check,Constrained-Random,Assertion Coverage,"A: a_glitch_xsecure_rf_ecc_rs1_bit_fault, a_glitch_xsecure_rf_ecc_rs2_bit_fault",,,,,,,,,,,,,,,,,
,,Reset value,Upon reset the register file general purpose registers shall be set to 32’b0 and the syndromes shall be set to a matching ECC value (such that no error is triggered by default).,Assert reset value is legal,Assertion check,"ENV capability, not specific test",Assertion Coverage,"A: a_xsecure_rf_ecc_gpr_reset_value, a_xsecure_rf_ecc_gpr_reset_value_rvfi_rs1, a_xsecure_rf_ecc_gpr_reset_value_rvfi_rs2",,,,,,,,,,,,,,,,,
,,Syndrome non-readable,No explicit direct access mechanism shall be provided for the register file syndromes,"Code inspection: check the register file, and make sure there are no signals from the register syndrome out of the module",N/A,N/A,N/A,N/A,,,,,,,,,,,,,,,,,
,,All 1's or all 0's is an error,The ECC codes shall be such that a value of all 1s or all 0s for a 32-bit word and its associated syndrome represent ECC errors.,"Verify that the syndrom of an register with value all 1s, is not all 1s, and the same for the case with all 0s. If the syndrom and register word is all 1s or all 0s, verify that the major alert is set.",Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,A: a_xsecure_rf_ecc_gpr_not_all_0s_or_1s,,,,,,,,,,,,,,,,,
,Hardened PC,Sequential PC values,"A sequential PC shall be computed as pc_id_o plus the size of the current instruction in the decode stage (i.e. +2 bytes or +4 bytes). If the computed sequential PC does not match the next pc_id_o value, then a security alert shall be raised via alert_ major_o, unless the next pc_id_o is the result of a control flow change (i.e. after reset, jumps, branches, exceptions, taken interrupts or debug entry ) or is supposed to remain stable ( i.e. due to stall or dummy instruction insertion)","Verify that sequential PC value is an increment of 2 or 4 of the past PC value, or is stable due to effects that require it to be stabe, or that major alert is set.",Assertion Check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_pc_hardening, a_glitch_xsecure_pc_hardening_sequential_instruction_hardening_enabled",,,,,,,,,,,,,,,,,
,,Non-sequential PC value,"Any glitch in the IF stage PC for non-sequential execution (jump, mret and branch) shall result in a alert_major_o (Jumps and branches are covered, reset, exceptions, interrupt and debug entry is not)",Drive a forced error in the IF stage PC and verify that the alert_major_o is driven.,Assertion Check,Directed Self-Checking,Assertion Coverage,"A: a_glitch_xsecure_pc_hardening_branch_hardening_enabled, a_glitch_xsecure_pc_hardening_jump_hardening_enabled, a_glitch_xsecure_pc_hardening_mret_hardening_enabled, a_glitch_xsecure_pc_hardening_branch_decision_hardening_enabled",,,,,,,,,,,,,,,,,
,,Default on,PC hardening should be default on,Verify that PC hardening is on after reset,Assertion check,"ENV capability, not specific test",Assertion Coverage,A: a_xsecure_pc_hardening_default_on,,,,,,,,,,,,,,,,,
,,Disable/enabled by cpuctrl.pcharden,Disabled/enabled via cpuctrl.pcharden,"Verify that alert major is set if the pc hardening control bit is set, and that alert major is not set if the control bit is cleard.",Assertion check,Directed Self-Checking,Assertion Coverage,"A: a_glitch_xsecure_pc_hardening_sequential_instruction_hardening_enabled, a_glitch_xsecure_pc_hardening_sequential_instruction_hardening_disabled, a_glitch_xsecure_pc_hardening_branch_hardening_enbled, a_glitch_xsecure_pc_hardening_branch_hardening_disabled, a_glitch_xsecure_pc_hardening_jump_hardening_enabled, a_glitch_xsecure_pc_hardening_jump_hardening_disabled, a_glitch_xsecure_pc_hardening_mret_hardening_enabled, a_glitch_xsecure_pc_hardening_mret_hardening_disabled, a_glitch_xsecure_pc_hardening_branch_decision_hardening_enabled, a_glitch_xsecure_pc_hardening_branch_decision_hardening_disabled",,,,,,,,,,,,,,,,,
,Hardened CSR,Shadow registers to ensure integrity of important CSR's,If a CSR is not equal to the bit-wise complement of its shadow CSR an alert shall be raised on alert_major_o. Hardened CSR's are listed In the User Manu,"Assert that CSRs and their shadows are the invert of eachother at all times (when not in reset), or they are not alert major is set.",N/A,N/A,N/A,N/A,,,,,,,,,,,,,,,,,
,,cpuctrl,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_cpuctrl
A: a_glitch_xsecure_hardened_csr_mismatch_cpuctrl",,,,,,,,,,,,,,,,,
,,dcsr,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_dcsr
A: a_glitch_xsecure_hardened_csr_mismatch_dcsr",,,,,,,,,,,,,,,,,
,,jvt,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_jvt
A: a_glitch_xsecure_hardened_csr_mismatch_jvt",,,,,,,,,,,,,,,,,
,,mcause,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mcause
A: a_glitch_xsecure_hardened_csr_mismatch_mcause",,,,,,,,,,,,,,,,,
,,mepc,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mepc
A: a_glitch_xsecure_hardened_csr_mismatch_mepc",,,,,,,,,,,,,,,,,
,,mie,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mie
A: a_glitch_xsecure_hardened_csr_mismatch_mie",,,,,,,,,,,,,,,,,
,,mintstatus,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mintstatus
A: a_glitch_xsecure_hardened_csr_mismatch_mintstatus",,,,,,,,,,,,,,,,,
,,mintthresh,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mintthresh
A: a_glitch_xsecure_hardened_csr_mismatch_mintthresh",,,,,,,,,,,,,,,,,
,,mscratch,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mscratch
A: a_glitch_xsecure_hardened_csr_mismatch_mscratch",,,,,,,,,,,,,,,,,
,,mscratchcsw,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mscratch
A: a_glitch_xsecure_hardened_csr_mismatch_mscratch",,,,,,,,,,,,,,,,,
,,mscratchcswl,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mscratch
A: a_glitch_xsecure_hardened_csr_mismatch_mscratch",,,,,,,,,,,,,,,,,
,,mseccfg,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mseccfg
A: a_glitch_xsecure_hardened_csr_mismatch_mseccfg",,,,,,,,,,,,,,,,,
,,mstateen,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mstateen0
A: a_glitch_xsecure_hardened_csr_mismatch_mstateen0",,,,,,,,,,,,,,,,,
,,mstatus,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mstatus
A: a_glitch_xsecure_hardened_csr_mismatch_mstatus",,,,,,,,,,,,,,,,,
,,mtvec,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mtvec
A: a_glitch_xsecure_hardened_csr_mismatch_mtvec",,,,,,,,,,,,,,,,,
,,mtvt,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_mtvt
A: a_glitch_xsecure_hardened_csr_mismatch_mtvt",,,,,,,,,,,,,,,,,
,,pmpaddr,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_pmpaddr
A: a_glitch_xsecure_hardened_csr_mismatch_pmpaddr",,,,,,,,,,,,,,,,,
,,pmpncfg,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_pmpncfg
A: a_glitch_xsecure_hardened_csr_mismatch_pmpncfg",,,,,,,,,,,,,,,,,
,,privlvl,(See above.),(See above.),Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_hardened_csr_privlvl
A: a_glitch_xsecure_hardened_csr_mismatch_privlvl",,,,,,,,,,,,,,,,,
,Interface Integrity,Configurable,Interface checksum checking ( i.e. *_rchk_i related ) shall be globally enabled/disabled via the integrity control bit in the cpuctrl CSR,Verify that checksum verification is enabled or disabled according to the integrity control bit in the cpuctrl CSR,Assertion Check,Directed Self-Checking,Assertion Coverage,"A: a_glitch_xsecure_integrity_rchk_instr_read, a_glitch_xsecure_integrity_rchk_instr_read_integrity_disabled, a_glitch_xsecure_integrity_rchk_data_store, a_glitch_xsecure_integrity_rchk_data_store_integrity_disabled, a_glitch_xsecure_integrity_rchk_data_read, a_glitch_xsecure_integrity_rchk_data_read_integrity_disabled",,,,,,,,,,,,,,,,,
,,Default on,The global integrity enable bit shall be default on.,Verify that the integrity enable bit is default on,Assertion Check,"ENV capability, not specific test",Assertion Coverage,A: a_xsecure_integrity_default_on,,,,,,,,,,,,,,,,,
,,reqpar generation,*_reqpar_o shall be the inverse of *_req_o at every rising clk _i edge (when not in reset).,Verify that *_reqpar_o is the inverse of *_req when not in reset,Assertion Check,Constrained-Random,Assertion Coverage,"A: a_xsecure_integrity_data_req_parity, a_xsecure_integrity_instr_req_parity",,,,,,,,,,,,,,,,,
,,gntpar and rvalidpar checking in non-glitch situations,"In non-glitch behaviour, the parity signals *_gntpar_i and *_rvalidpar_i shall be the inverse of *_gnt_i and *_rvalid_i when not in reset.","Verify that *_gntpar_i and *_rvalidpar_i is inverse of *gnt_i and *_rvalid_i, when not in reset.",Assertion Check,Constrained-Random,Assertion Coverage,"A: a_xsecure_integrity_data_gnt_parity, a_xsecure_integrity_instr_gnt_parity, a_xsecure_integrity_data_rvalid_parity, a_xsecure_integrity_instr_rvalid_parity",,,,,,,,,,,,,,,,,
,,Output checksums,Checksum signals ( instr_achk_o and data_achk_o ) shall be generated for the OBI address phase signals as specified in the SPEC,Verify that *_achk_o is generated according to the specifications in the SPEC,Assertion Check,Constrained-Random,Assertion Coverage,"A: a_xsecure_integrity_data_achk, a_xsecure_integrity_instr_achk",,,,,,,,,,,,,,,,,
,,Input checksums,Checksum signals ( instr_rchk_i and data_rchk_i ) shall be checked according to the specifications in the SPEC,Verify that *_rchk_i is checked according to the specifications in the SPEC,Assertion Check,Constrained-Random,Assertion Coverage,"A: a_xsecure_integrity_instr_rchk, a_xsecure_integrity_store_data_rchk, a_xsecure_integrity_load_data_rchk",,,,,,,,,,,,,,,,,
,,Integrity errors,Integrity errors for an instruction owes to parity or checksum faults,"Verify that integrity errors for an instruction owes to parity or checksum faults, so that we can use the integrity_err signal to indicate integrity error for when verifying the other specifications.",Assertion Check,Directed Self-Checking,Assertion Coverage,"A: a_glitch_xsecure_integrity_instr_gntparity_fault_integrity_err, a_glitch_xsecure_integrity_data_gntparity_fault_integrity_err, a_glitch_xsecure_integrity_instr_rvalidparity_fault_integrity_err, a_glitch_xsecure_integrity_data_rvalidparity_fault_integrity_err, a_glitch_xsecure_integrity_instr_rchk_fault_integrity_err, a_glitch_xsecure_integrity_data_rchk_fault_integrity_err_store, a_glitch_xsecure_integrity_data_rchk_fault_integrity_err_load",,,,,,,,,,,,,,,,,
,,Fault propegation,Instruction checksum signal bits and detected OBI integrity errors shall pass together with the instruction data itself through the fetch stage.,Verify that the integrity errors  and checksum bits propegated to the alignment buffer ,Assertion Check,Directed Self-Checking,Assertion Coverage,"A: a_xsecure_integrity_instr_to_alignment_buffer, a_glitch_xsecure_integrity_instr_to_alignment_buffer",,,,,,,,,,,,,,,,,
,,Fault propegation (instr),An instruction shall have an associated integrity error if any of its related (32 - bit) instr_rdata_i fetches and/or alignment buffer entries indicate an integrity error or alignment buffer based checksum error,"Verify that instructions in the IF-ID stage has an integrity error if any of its instr_rdata_fetches has an integrity error, or there is a falut in the alignmentbuffer checksum",Assertion Checks,Directed Self-Checking,Assertion Coverage,A: a_glitch_xsecure_integrity_instr_fetch_fusion,,,,,,,,,,,,,,,,,
,,Fault propegation (data),"If any data bus fetch associated with the execution of a load instruction, store instruction, pop - type instruction or push - type instruction has an associated parity/checksum error, then that load instruction, store instruction, pop - type instruction or push - type instruction shall have an associated parity/checksum error.",Verify that it is generated a pending NMI if any valid data fetch has an integrity error,Assertion Check,Directed Self-Checking,Assertion Coverage,"A: a_glitch_xsecure_integrity_data_integrity_err_helper_assert, a_glitch_xsecure_integrity_data_integrity_err",,,,,,,,,,,,,,,,,
,,Register file update,Load instructions and pop - type instructions with parity/checksum errors shall still write the register file (in the same way as if no parity/checksum error happened).,Verify that the register file is updated even though there is an integrity fault,Assertion check,Directed Self-Checking,Assertion Coverage,A: a_xsecure_integrity_update_register_parity_checksum_error. COV: c_glitch_xsecure_integrity_update_register_parity_checksum_error,,,,,,,,,,,,,,,,,
,,Major alert (integrity),Non - associated instruction or data interface integrity ( parity/checksum ) error sets major alert,Verify that major alert is set if there is an instruction or data interface integrity fault ,Assertion check,Directed Self-Checking,Assertion Coverage,"A: a_glitch_xsecure_integrity_data_gnt_parity, a_glitch_xsecure_integrity_instr_gnt_parity, a_glitch_xsecure_integrity_data_rvalid_parity, a_glitch_xsecure_integrity_instr_rvalid_parity",,,,,,,,,,,,,,,,,
,,Major alert (instruction),Instruction parity/checksum fault ( i.e. when triggering the related exception) sets major alert. ,Verify that instruction parity/checksum fault ( i.e. when triggering the related exception) sets major alert. ,Assertion check,Directed Self-Checking,Assertion Coverage,A: a_glitch_xsecure_integrity_instr_integrity_error,,,,,,,,,,,,,,,,,
,,Major alert (data),Store/load parity/checksum fault NMI ( i.e. when triggering the related NMI) sets major alert,Verify that store/load parity/checksum fault NMI ( i.e. when triggering the related NMI) sets major alert,Assertion check,Directed Self-Checking,Assertion Coverage,A: a_glitch_xsecure_integrity_data_integrity_err,,,,,,,,,,,,,,,,,
,,Instruction exception code,An attempt to execute an instruction with an associated integrity error shall cause an instruction parity/checksum fault exception (exception code 0x19).,Verify that an attempt to execute an instruction with an associated integrity error shall cause an instruction parity/checksum fault exception (exception code 0x19).,Assertion check,Directed Self-Checking,Assertion Coverage,A: a_glitch_xsecure_integrity_instr_integrity_error,,,,,,,,,,,,,,,,,
,,Data exception code,A load/store access with an associated integrity error shall cause a load parity/checksum fault NMI (exception code 0x402/0x403).,Verify that a load/store access with an associated integrity error shall cause a load parity/checksum fault NMI (exception code 0x402/0x403).,Assertion check,Directed Self-Checking,Functional coverage,"A: a_glitch_xsecure_integrity_data_integrity_err_helper_assert, a_glitch_xsecure_integrity_data_integrity_err. COV:c_glitch_xsecure_security_parity_checksum_fault_NMI_load_instruction, c_glitch_xsecure_security_parity_checksum_fault_NMI_store_instruction",,,,,,,,,,,,,,,,,
,Bus Protocol Hardening,Interface violation of the OBI busses,"Verify that OBI protocol is followed, or if there is a violation alert major is set.","Verify that the OBI protocol is followed, but if not, alert major is set",Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_bus_hardening_no_outstanding_obi_instr_trans, a_xsecure_bus_hardening_no_outstanding_obi_data_trans, a_glitch_xsecure_bus_hardening_no_outstanding_obi_instr_trans, a_glitch_xsecure_bus_hardening_no_outstanding_obi_data_trans",,,,,,,,,,,,,,,,,
,,Interface between MPU and alignment buffer,"Verify that OBI protocol is followed, or if there is a violation alert major is set.","Verify that the OBI protocol is followed, but if not, alert major is set",Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_bus_hardening_alignment_buff_receive_instr_if_mpu_resp, a_glitch_xsecure_bus_hardening_alignment_buff_receive_instr_if_mpu_resp",,,,,,,,,,,,,,,,,
A: ,,Interface between load store unit MPU and load store unit,"Verify that OBI protocol is followed, or if there is a violation alert major is set.","Verify that the OBI protocol is followed, but if not, alert major is set",Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_bus_hardening_lsu_receive_lsu_mpu_resp, a_glitch_xsecure_bus_hardening_lsu_receive_lsu_mpu_resp",,,,,,,,,,,,,,,,,
,,Core side memory transaction counter in the load-store unit response filter,"The counter should not underflow, but if it does, alert major is set","Verify that the counter should not underflow, but if it does, alert major is set",Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_bus_hardening_core_side_cnt, a_glitch_xsecure_bus_hardening_core_side_cnt_underflows",,,,,,,,,,,,,,,,,
,,Bus side memory transaction counter in the load-store unit response filter,"The counter should not underflow, but if it does, alert major is set","Verify that the counter should not underflow, but if it does, alert major is set",Assertion check,Constrained-Random and Directed Self-Checking,Assertion Coverage,"A: a_xsecure_bus_hardening_bus_side_cnt, a_glitch_xsecure_bus_hardening_bus_side_cnt_underflows",,,,,,,,,,,,,,,,,
,Reduction of profiling infrastructure,CSRs to decode as illegal,"The following CSRs shall decode as illegal: cycle, instret, cycleh, instreth, hpmcounter3-31, hpmcounterh3-31",Verify any instruction attempting to read or write these registers decode as illegal,Check against RM,Directed Non-Self-Checking,N/A,DTC: csr_should_not_be_present,,,,,,,,,,,,,,,,,
,,CSRs to be hardwired to 0x0,"The following CSRs shall be hardwired to 0x0: mhpmcounteren3-31, mhpmcounterh3-31, mhpevent3-31",Assert these registers are always 0,Assertion check,Constrained-Random,Assertion Coverage,"A: a_xsecure_reduced_profiling_mhpmevent, a_xsecure_reduced_profiling_mhpmcounter",,,,,,,,,,,,,,,,,
,,CSR present,mcountereren CSR shall be present WARL (0x0),Verify that mcounteren CSR is present and WARL,Check against RM,Directed Non-Self-Checking,N/A,DTC: csr_should_be_present,,,,,,,,,,,,,,,,,
,,CSR present,"mcycle, minstret, mcycleh and minstreth CSRs are present","Verify that CSRs mcycle, minstret, mcycleh and minstreth are present",Check against RM,Directed Non-Self-Checking,N/A,DTC: csr_should_be_present,,,,,,,,,,,,,,,,,
,,CSR bits ardwired to 0,Bits 1 and 3-31 of the mcountinhibit CSR shall be hardwired to 0,"Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",Assertion check,Constrained-Random,Assertion Coverage,A: a_xsecure_reduced_profiling_mcountinhibit,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,
