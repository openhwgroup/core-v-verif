[
    {
        "Requirement Location": "CV32E40S User manual v1.0.0",
        "Feature": "Security Alerts",
        "Sub Feature": "alert_major_o",
        "Feature Description": "The alert_major_o signal shall be 1 for every cycle that the following critical security issues occur and persist: 1) Register file indicates an ECC error, 2) hardened PC error, 3) hardened CSR error, 4) non-associated instruction interface integrity (parity/checksum) error, 5) non associated data interface integrity (parity/checksum) error, 6) instruction parity/checksum fault, 7) store parity/checksum fault NMI, 8) load parity/checksum fault NMI, and 9) bus protocol error.",
        "Verification Goal": "Verify that alert_major_o is high whenever the previously listed errors occur. Provoking the errors require inserting glitches. The assertions are covered in the following subsections",
        "Pass/Fail Criteria": "See subsections",
        "Test Type": "See subsections",
        "Coverage Method": "See subsections",
        "Link to Coverage": "A: see subsections",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Security Alerts",
        "Sub Feature": "alert_major_o",
        "Feature Description": "major_alert_o is zero when there are no error cases triggering major_alert_o",
        "Verification Goal": "Verify that alsert_major_o is 0 in non-error cases by assuming no glitches. This should be done by creating a scoreboard check/assert for no alerts, that can be explicitly configured off when doing xsecure checking. Also run through formal. This check is assumed but not mentioned for every feature in this plan. ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_security_alert_major",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Security Alerts",
        "Sub Feature": "alert_minor_o",
        "Feature Description": "A 1-cycle high pulse shall be generated on alert_minor_o for the following critical security issues:\nSee list in the User Manual, \"Security Alerts\"",
        "Verification Goal": "Verify that the alert_minor_o is high for 1 cycle when the specified errors occur. ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_security_alert_lfsr0_lockup, a_xsecure_security_alert_lfsr1_lockup, a_xsecure_security_alert_lfsr2_lockup, a_xsecure_security_alert_non_nmi_exceptions, a_xsecure_security_alert_nmi_no_integrity, a_xsecure_security_set_nmi_when_obi_data_error",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Security Alerts",
        "Sub Feature": "alert_minor_o",
        "Feature Description": "major_alert_o is zero when there are no error cases triggering major_alert_o",
        "Verification Goal": "Verify that the alert_minor_o is low in any non-error case. Check similarly to alert_major_o",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_security_alert_minor_reasons",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Security Alerts",
        "Sub Feature": "alert signals are glitchless",
        "Feature Description": "Both alert signals shall be created in a glitchless manner, coming directly from flip flops",
        "Verification Goal": "Code inspection: check that there is no logic inbetween the flops alert major and minor signals and the core's outputted signals alert_major_o and alert_minor_o",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Data Independent Timing",
        "Sub Feature": "Configurable",
        "Feature Description": "Data independent timing is enabled by setting the dataindtiming bit in the cpuctrl CSR.",
        "Verification Goal": "Verify functionality is enabled/disabled by setting/clearing the bit",
        "Pass/Fail Criteria": "Coverage check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "A: a_xsecure_dataindtiming_branch_timing_pc_hardening_disabled, a_xsecure_dataindtiming_branch_timing_pc_hardening_enabled, a_xsecure_dataindtiming_div_rem_timing. COV: c_xsecure_dataindtiming_branch_timing_off, c_xsecure_dataindtiming_core_div_rem_timing_off",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Data Independent Timing",
        "Sub Feature": "Reset value: default on",
        "Feature Description": "Data independent timing shall be default enabled",
        "Verification Goal": "Verify CSR value at reset",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A:a_xsecure_dataindtiming_default_on",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Data Independent Timing",
        "Sub Feature": "Branch timing",
        "Feature Description": "Branches shall take 3 cycles, independent of the branch being taken. Exception: branches to a non-word-aligned non-RVC instruction are allowed an extra cycle(4 cycles)",
        "Verification Goal": "Verify execution time. Coverage needed to show more than one variation, with PC hardening enabled and disabled",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dataindtiming_branch_timing_pc_hardening_disabled,\na_xsecure_dataindtiming_branch_timing_pc_hardening_enabled",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Data Independent Timing",
        "Sub Feature": "DIV/REM timing",
        "Feature Description": "DIV/REM instructions shall always take 35 cycles",
        "Verification Goal": "Verify execution time. Coverage needed to show more than one variation",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dataindtiming_div_rem_timing",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Data Independent Timing",
        "Sub Feature": "Timing exception",
        "Feature Description": "Jumps, branches, and instruction fences to a non-word-aligned non-RVC instruction are allowed to take an extra cycle.",
        "Verification Goal": "Keep in mind when verifying strict timing",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Overall consideration",
        "Feature Description": "",
        "Verification Goal": "Verifying the dummy instructions will be complicated, as these are instructions that should be verified as such, without appearing on RVFI and the support of the ISS. Consider making these part of the RVFI subop interface.",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Configurable",
        "Feature Description": "Dummy instructions are enabled via the rnddummy bit in the cpuctrl CSR.",
        "Verification Goal": "Verify functionality is enabled/disabled by setting/clearing the bit. Might be just a coverage using other asserts from this section",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_dont_generated_dummy_instr_if_dummy_setting_is_off. COV: c_xsecure_dummy_instr_generated_dummy_instr_if_dummy_setting_is_on. ",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Configurable",
        "Feature Description": "The frequency of injected instructions is tuned via the rnddummyfreq bits in the cpuctrl CSR.",
        "Verification Goal": "Verify that the injected instructions is tuned by the randdummyfreq bits.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_frequency_4,\na_xsecure_dummy_instr_frequency_8,\na_xsecure_dummy_instr_frequency_16,\na_xsecure_dummy_instr_frequency_32,\na_xsecure_dummy_instr_frequency_64.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Configurable",
        "Feature Description": "The frequency of injected instructions is tuned via the rnddummyfreq bits in the cpuctrl CSR.",
        "Verification Goal": "Verify statistical occurrence of dummy instructions, with an end of simulation comparison of occurance, lower/upper limit. At least verify that dummy instructions occur with a maximal periode of what is decided by the randdummyfreq signal.",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "TODO: Verify statistically distribution. A: a_xsecure_dummy_instr_frequency_4,\na_xsecure_dummy_instr_frequency_8,\na_xsecure_dummy_instr_frequency_16,\na_xsecure_dummy_instr_frequency_32,\na_xsecure_dummy_instr_frequency_64.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Reset value: default off",
        "Feature Description": "Dummy instructions shall be default disabled",
        "Verification Goal": "Verify CSR value at reset",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_default_off",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Dummy instuctions inserted in IF stage",
        "Feature Description": "Dummy instruction insertion shall be performed in the IF stage.",
        "Verification Goal": "Detect the apperance of dummy instructions, and verify that they appear at IF",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_is_inserted_in_if_stage",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Opcodes picked randomly based on LFSR0, picked from add, mul, and, bltu",
        "Feature Description": "Opcode of dummy instructions are either add, mul, and or bltu",
        "Verification Goal": "Detect apperence of add, mul and bltu opcodes for dummy instructions, and no other type of operations. ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_is_add_and_mul_or_btlu. COV: c_xsecure_dummy_instr_is_add,\nc_xsecure_dummy_instr_is_and,\nc_xsecure_dummy_instr_is_mul, c_xsecure_dummy_instr_is_bltu.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Opcodes picked randomly based on LFSR0, picked from add, mul, and, bltu",
        "Feature Description": "Dummy instructions shall be pseudo randomly generated based on LFSR0",
        "Verification Goal": "Hard to verify. Ideas: report dummy to SB(new agent) and verify random distribution. Set values in LFSR0 and check dummy picked(requires intimate knowledge of implementation). At least verify that all the different types of dummy instructions occur.",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Constrained-Random",
        "Coverage Method": "N/A",
        "Link to Coverage": "TODO: Verify statistically distribution. COV: c_xsecure_dummy_instr_is_add, c_xsecure_dummy_instr_is_and, c_xsecure_dummy_instr_is_mul, c_xsecure_dummy_instr_is_bltu",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Branch instruction jump to the instruction that should have been executed if there was no dummy instructions",
        "Feature Description": "The dummy bltu shall, if taken, branch to the instruction that would have been executed if no dummy instruction had been inserted.",
        "Verification Goal": "Verify that program always continues at the next instruction",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_bltu_jumping.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Source registers, destination register and data for dummy instructions",
        "Feature Description": "Source registers shall be picked randomly from x0-x31/x0-x15",
        "Verification Goal": "Verify statistical distribution of source registers for dummy instructions. verify by SB at end of test. At least verify that source registers can be either of the registers x0-x31",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Constrained-Random",
        "Coverage Method": "N/A",
        "Link to Coverage": "TODO: Verify statistically distribution. COV: c_xsecure_dummy_source_reg1, c_xsecure_dummy_source_reg2",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Source registers, destination register and data for dummy instructions",
        "Feature Description": "Destination register shall be X0",
        "Verification Goal": "Verify destination register for dummy instructions",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_destination_is_x0",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Source registers, destination register and data for dummy instructions",
        "Feature Description": "Actual data operands used shall come from LFSR1 and LFSR2",
        "Verification Goal": "Verify LFSRx used as operands",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_operands_from_LFSR1_and_LFSR2",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Source registers, destination register and data for dummy instructions",
        "Feature Description": "Information from RS1 and RS2 shall be used to trigger pipeline stalls as normal",
        "Verification Goal": "Verify apparently normal behaviour",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_load_dummy_stall",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "MCYCLE performance counter updated as normal",
        "Feature Description": "Dummy instructions shall update MCYCLE as if they were normal instructions",
        "Verification Goal": "Verify affect on MCYCLE ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_updates_mcycle",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "MINSTRET performance counters shall not count the dummy instructions",
        "Feature Description": "Dummy instructions shall not affect MINSTRET counters",
        "Verification Goal": "Verify no update of MINSTRET for dummy instructions",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_instr_do_not_update_minstret",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "read related CSRs",
        "Feature Description": "secureseed0, secureseed1 and secureseed2 shall return 0 upon a read.",
        "Verification Goal": "Verify reads always return 0",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "N/A",
        "Link to Coverage": "DTC: test_secureseeds_show_zero_at_reads",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "related CSRs accessible by machine mode only",
        "Feature Description": "cpuctrl, secureseed0, secureseed1 and secureseed2 shall be accessible in machine mode only",
        "Verification Goal": "Verify that they can be read in machine mode only",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "N/A",
        "Link to Coverage": "DTC: test_ctrlcpu_and_secureseeds_accessable_in_machine_mode_only",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "LFSRx lockup reset",
        "Feature Description": "reset to default",
        "Verification Goal": "Verify a lockup is detected and is reset to default. This can also be triggered after generation of a hint instruction as well as after the generation of a dummy instruction",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_hint_instr_LFSR0_lockup_reset,\na_xsecure_dummy_hint_instr_LFSR1_lockup_reset,\na_xsecure_dummy_hint_instr_LFSR2_lockup_reset.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "LFSR Bad Seed",
        "Feature Description": "Certain seeds should eventually lead to the LFSR locking up. (This is different from explicitly writing it to 0 and causing an immediate lockup.)",
        "Verification Goal": "For all secureseed registers, write a value that eventually (but not immediately) leads to a lockup, and let the core run until that happens. (Could maybe be done with only a cover in formal, or with a simple directed test in sim, or both.)",
        "Pass/Fail Criteria": "Directed test",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "TODO:WARNING:silabs-robin",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "Write to LFSR",
        "Feature Description": "LFSR0, LFSR1, LFSR2 shall be seeded by CSR writes to secureseed0, secureseed1, and \nsecureseed2 respectively.",
        "Verification Goal": "Verify that writing to secureseedN seeds the LFRSN",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_hint_instr_LFSR0_write_secureseed0_reg,\na_xsecure_dummy_hint_instr_LFSR1_write_secureseed1_reg,\na_xsecure_dummy_hint_instr_LFSR2_write_secureseed2_reg.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Dummy Instruction Insertion",
        "Sub Feature": "LFSR update",
        "Feature Description": "LFSRs shall be updated to their next value upon random instruction for dummy insertion. (Det st\u00e5r kun at LFSR skal oppdateres ved hint instruksjon, men de skal vel ogs\u00e5 oppdateres p\u00e5 dummy instruksjon, eller?)",
        "Verification Goal": "Verify that the LFSRs are updated upon a dummy or hint instruction",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_dummy_updates_lfsr0,\na_xsecure_dummy_updates_lfsr1,\na_xsecure_dummy_updates_lfsr2.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "Configurable",
        "Feature Description": "Hint is enabled via the rndhint bit in the cpuctrl CSR.",
        "Verification Goal": "Verify functionality is enabled/disabled by setting/clearing the bit",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "A: a_xsecure_hint_instr_dont_generated_hint_instr_if_hint_setting_is_off. COV: c_xsecure_hint_instr_generated_hint_instr_if_hint_setting_is_on",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "Reset value: default off",
        "Feature Description": "Hint shall be default disabled",
        "Verification Goal": "Verify CSR value at reset",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_default_off",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "Random instruction selected like dummy instruction",
        "Feature Description": "generation shall be the same as for dummy instructions: ",
        "Verification Goal": "Verify with Dummy Instruction verification",
        "Pass/Fail Criteria": "See the following",
        "Test Type": "See the following",
        "Coverage Method": "See the following",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "Opcode of hint instructions are either add, mul, and or bltu",
        "Verification Goal": "Detect apperence of add, mul and, and bltu opcodes for hint instructions, and no other type of operations. ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "A:.a_xsecure_hint_instr_is_add_and_mul_or_btlu. COV: c_xsecure_hint_instr_is_add,\nc_xsecure_hint_instr_is_and,\nc_xsecure_hint_instr_is_mul, c_xsecure_hint_instr_is_bltu.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "Hint instructions shall be pseudo randomly generated based on LFSR0",
        "Verification Goal": "Hard to verify. Ideas: report hint to SB(new agent) and verify random distribution. Set values in LFSR0 and check hint picked(requires intimate knowledge of implementation)",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Constrained-Random",
        "Coverage Method": "N/A",
        "Link to Coverage": "TODO: Verify statistically distribution. COV: c_xsecure_hint_instr_is_add, c_xsecure_hint_instr_is_and, c_xsecure_hitn_instr_is_mul, c_xsecure_hint_instr_is_bltu",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "The hint bltu shall, if taken, branch to the instruction that would have been executed if no hint instruction had been inserted.",
        "Verification Goal": "Verify that program always continues at the next instruction",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_instr_bltu_jumping",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "Source registers shall be picked randomly from x0-x31/x0-x15",
        "Verification Goal": "Verify statistical distribution of source registers for hint instructions. verify by SB at end of test. At least verify that source registers can be either of the registers x0-x31",
        "Pass/Fail Criteria": "Other",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "TODO: Verify statistically distribution. COV:  c_xsecure_hint_source_reg1, c_xsecure_hint_source_reg2",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "Destination register shall be X0",
        "Verification Goal": "Verify destination register for hint instructions",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_instr_destination_is_x0",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "Actual data operands used shall come from LFSR1 and LFSR2",
        "Verification Goal": "Verify LFSRx used as operands",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_instr_operands_from_LFSR1_and_LFSR2",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "",
        "Feature Description": "Information from RS1 and RS2 shall be used to trigger pipeline stalls as normal",
        "Verification Goal": "Verify apparently normal behaviour",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_instr_load_hint_stall",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "retiring hint affects minstret",
        "Feature Description": "A retiring hint instruction shall lead to a minstret increment",
        "Verification Goal": "Verify minstret like normal",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_instructions_updates_minstret",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "LFSR update",
        "Feature Description": "LFSRs shall be updated to their next value upon random instruction for hint insertion. (Det st\u00e5r kun at LFSR skal oppdateres ved hint instruksjon, men de skal vel ogs\u00e5 oppdateres p\u00e5 dummy instruksjon, eller?)",
        "Verification Goal": "Verify that the LFSRs are updated upon a dummy or hint instruction",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_updates_lfsr0,\na_xsecure_hint_updates_lfsr1,\na_xsecure_hint_updates_lfsr2.",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Random Instruction for Hint",
        "Sub Feature": "Retiring hint appears as slt on RVFI",
        "Feature Description": "A retiring hint instruction shall be reported on RVFI as slt",
        "Verification Goal": "verify no difference if hint replaced by random instruction",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hint_instructions_reports_on_rvfi_as_slli",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Register file ECC",
        "Sub Feature": "Always on",
        "Feature Description": "Ecc checking shall always be enabled",
        "Verification Goal": "Do not create any parameters or disables for checks for this feature",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Register file ECC",
        "Sub Feature": "No suppresion",
        "Feature Description": "ECC checking shall be performed for every actual register file read and the check result shall never be suppressed (also not if a register file bypass value is used instead of the value from the register file).",
        "Verification Goal": "Assert that any mismatch on a read results in an alert, if the error is of 1 or 2 bits.",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_rf_ecc_rs1_bit_fault, a_glitch_xsecure_rf_ecc_rs2_bit_fault",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Register file ECC",
        "Sub Feature": "Reset value",
        "Feature Description": "Upon reset the register file general purpose registers shall be set to 32\u2019b0 and the syndromes shall be set to a matching ECC value (such that no error is triggered by default).",
        "Verification Goal": "Assert reset value is legal",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_rf_ecc_gpr_reset_value, a_xsecure_rf_ecc_gpr_reset_value_rvfi_rs1, a_xsecure_rf_ecc_gpr_reset_value_rvfi_rs2",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Register file ECC",
        "Sub Feature": "Syndrome non-readable",
        "Feature Description": "No explicit direct access mechanism shall be provided for the register file syndromes",
        "Verification Goal": "Code inspection: check the register file, and make sure there are no signals from the register syndrome out of the module",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Register file ECC",
        "Sub Feature": "All 1's or all 0's is an error",
        "Feature Description": "The ECC codes shall be such that a value of all 1s or all 0s for a 32-bit word and its associated syndrome represent ECC errors.",
        "Verification Goal": "Verify that the syndrom of an register with value all 1s, is not all 1s, and the same for the case with all 0s. If the syndrom and register word is all 1s or all 0s, verify that the major alert is set.",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_rf_ecc_gpr_not_all_0s_or_1s",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened PC",
        "Sub Feature": "Sequential PC values",
        "Feature Description": "A sequential PC shall be computed as pc_id_o plus the size of the current instruction in the decode stage (i.e. +2 bytes or +4 bytes). If the computed sequential PC does not match the next pc_id_o value, then a security alert shall be raised via alert_ major_o, unless the next pc_id_o is the result of a control flow change (i.e. after reset, jumps, branches, exceptions, taken interrupts or debug entry ) or is supposed to remain stable ( i.e. due to stall or dummy instruction insertion)",
        "Verification Goal": "Verify that sequential PC value is an increment of 2 or 4 of the past PC value, or is stable due to effects that require it to be stabe, or that major alert is set.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_pc_hardening, a_glitch_xsecure_pc_hardening_sequential_instruction_hardening_enabled",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened PC",
        "Sub Feature": "Non-sequential PC value",
        "Feature Description": "Any glitch in the IF stage PC for non-sequential execution (jump, mret and branch) shall result in a alert_major_o (Jumps and branches are covered, reset, exceptions, interrupt and debug entry is not)",
        "Verification Goal": "Drive a forced error in the IF stage PC and verify that the alert_major_o is driven.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_pc_hardening_branch_hardening_enabled, a_glitch_xsecure_pc_hardening_jump_hardening_enabled, a_glitch_xsecure_pc_hardening_mret_hardening_enabled, a_glitch_xsecure_pc_hardening_branch_decision_hardening_enabled",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened PC",
        "Sub Feature": "Default on",
        "Feature Description": "PC hardening should be default on",
        "Verification Goal": "Verify that PC hardening is on after reset",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_pc_hardening_default_on",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened PC",
        "Sub Feature": "Disable/enabled by cpuctrl.pcharden",
        "Feature Description": "Disabled/enabled via cpuctrl.pcharden",
        "Verification Goal": "Verify that alert major is set if the pc hardening control bit is set, and that alert major is not set if the control bit is cleard.",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_pc_hardening_sequential_instruction_hardening_enabled, a_glitch_xsecure_pc_hardening_sequential_instruction_hardening_disabled, a_glitch_xsecure_pc_hardening_branch_hardening_enbled, a_glitch_xsecure_pc_hardening_branch_hardening_disabled, a_glitch_xsecure_pc_hardening_jump_hardening_enabled, a_glitch_xsecure_pc_hardening_jump_hardening_disabled, a_glitch_xsecure_pc_hardening_mret_hardening_enabled, a_glitch_xsecure_pc_hardening_mret_hardening_disabled, a_glitch_xsecure_pc_hardening_branch_decision_hardening_enabled, a_glitch_xsecure_pc_hardening_branch_decision_hardening_disabled",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "Shadow registers to ensure integrity of important CSR's",
        "Feature Description": "If a CSR is not equal to the bit-wise complement of its shadow CSR an alert shall be raised on alert_major_o. Hardened CSR's are listed In the User Manu",
        "Verification Goal": "Assert that CSRs and their shadows are the invert of eachother at all times (when not in reset), or they are not alert major is set.",
        "Pass/Fail Criteria": "N/A",
        "Test Type": "N/A",
        "Coverage Method": "N/A",
        "Link to Coverage": "N/A",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "cpuctrl",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_cpuctrl\nA: a_glitch_xsecure_hardened_csr_mismatch_cpuctrl",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "dcsr",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_dcsr\nA: a_glitch_xsecure_hardened_csr_mismatch_dcsr",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "jvt",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_jvt\nA: a_glitch_xsecure_hardened_csr_mismatch_jvt",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mcause",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mcause\nA: a_glitch_xsecure_hardened_csr_mismatch_mcause",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mepc",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mepc\nA: a_glitch_xsecure_hardened_csr_mismatch_mepc",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mie",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mie\nA: a_glitch_xsecure_hardened_csr_mismatch_mie",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mintstatus",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mintstatus\nA: a_glitch_xsecure_hardened_csr_mismatch_mintstatus",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mintthresh",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mintthresh\nA: a_glitch_xsecure_hardened_csr_mismatch_mintthresh",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mscratch",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mscratch\nA: a_glitch_xsecure_hardened_csr_mismatch_mscratch",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mscratchcsw",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mscratch\nA: a_glitch_xsecure_hardened_csr_mismatch_mscratch",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mscratchcswl",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mscratch\nA: a_glitch_xsecure_hardened_csr_mismatch_mscratch",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mseccfg",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mseccfg\nA: a_glitch_xsecure_hardened_csr_mismatch_mseccfg",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mstateen",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mstateen0\nA: a_glitch_xsecure_hardened_csr_mismatch_mstateen0",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mstatus",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mstatus\nA: a_glitch_xsecure_hardened_csr_mismatch_mstatus",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mtvec",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mtvec\nA: a_glitch_xsecure_hardened_csr_mismatch_mtvec",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "mtvt",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_mtvt\nA: a_glitch_xsecure_hardened_csr_mismatch_mtvt",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "pmpaddr",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_pmpaddr\nA: a_glitch_xsecure_hardened_csr_mismatch_pmpaddr",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "pmpncfg",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_pmpncfg\nA: a_glitch_xsecure_hardened_csr_mismatch_pmpncfg",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Hardened CSR",
        "Sub Feature": "privlvl",
        "Feature Description": "(See above.)",
        "Verification Goal": "(See above.)",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_hardened_csr_privlvl\nA: a_glitch_xsecure_hardened_csr_mismatch_privlvl",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Configurable",
        "Feature Description": "Interface checksum checking ( i.e. *_rchk_i related ) shall be globally enabled/disabled via the integrity control bit in the cpuctrl CSR",
        "Verification Goal": "Verify that checksum verification is enabled or disabled according to the integrity control bit in the cpuctrl CSR",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_rchk_instr_read, a_glitch_xsecure_integrity_rchk_instr_read_integrity_disabled, a_glitch_xsecure_integrity_rchk_data_store, a_glitch_xsecure_integrity_rchk_data_store_integrity_disabled, a_glitch_xsecure_integrity_rchk_data_read, a_glitch_xsecure_integrity_rchk_data_read_integrity_disabled",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Default on",
        "Feature Description": "The global integrity enable bit shall be default on.",
        "Verification Goal": "Verify that the integrity enable bit is default on",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "ENV capability, not specific test",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_default_on",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "reqpar generation",
        "Feature Description": "*_reqpar_o shall be the inverse of *_req_o at every rising clk _i edge (when not in reset).",
        "Verification Goal": "Verify that *_reqpar_o is the inverse of *_req when not in reset",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_data_req_parity, a_xsecure_integrity_instr_req_parity",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "gntpar and rvalidpar checking in non-glitch situations",
        "Feature Description": "In non-glitch behaviour, the parity signals *_gntpar_i and *_rvalidpar_i shall be the inverse of *_gnt_i and *_rvalid_i when not in reset.",
        "Verification Goal": "Verify that *_gntpar_i and *_rvalidpar_i is inverse of *gnt_i and *_rvalid_i, when not in reset.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_data_gnt_parity, a_xsecure_integrity_instr_gnt_parity, a_xsecure_integrity_data_rvalid_parity, a_xsecure_integrity_instr_rvalid_parity",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Output checksums",
        "Feature Description": "Checksum signals ( instr_achk_o and data_achk_o ) shall be generated for the OBI address phase signals as specified in the SPEC",
        "Verification Goal": "Verify that *_achk_o is generated according to the specifications in the SPEC",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_data_achk, a_xsecure_integrity_instr_achk",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Input checksums",
        "Feature Description": "Checksum signals ( instr_rchk_i and data_rchk_i ) shall be checked according to the specifications in the SPEC",
        "Verification Goal": "Verify that *_rchk_i is checked according to the specifications in the SPEC",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_instr_rchk, a_xsecure_integrity_store_data_rchk, a_xsecure_integrity_load_data_rchk",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Integrity errors",
        "Feature Description": "Integrity errors for an instruction owes to parity or checksum faults",
        "Verification Goal": "Verify that integrity errors for an instruction owes to parity or checksum faults, so that we can use the integrity_err signal to indicate integrity error for when verifying the other specifications.",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_instr_gntparity_fault_integrity_err, a_glitch_xsecure_integrity_data_gntparity_fault_integrity_err, a_glitch_xsecure_integrity_instr_rvalidparity_fault_integrity_err, a_glitch_xsecure_integrity_data_rvalidparity_fault_integrity_err, a_glitch_xsecure_integrity_instr_rchk_fault_integrity_err, a_glitch_xsecure_integrity_data_rchk_fault_integrity_err_store, a_glitch_xsecure_integrity_data_rchk_fault_integrity_err_load",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Fault propegation",
        "Feature Description": "Instruction checksum signal bits and detected OBI integrity errors shall pass together with the instruction data itself through the fetch stage.",
        "Verification Goal": "Verify that the integrity errors  and checksum bits propegated to the alignment buffer ",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_instr_to_alignment_buffer, a_glitch_xsecure_integrity_instr_to_alignment_buffer",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Fault propegation (instr)",
        "Feature Description": "An instruction shall have an associated integrity error if any of its related (32 - bit) instr_rdata_i fetches and/or alignment buffer entries indicate an integrity error or alignment buffer based checksum error",
        "Verification Goal": "Verify that instructions in the IF-ID stage has an integrity error if any of its instr_rdata_fetches has an integrity error, or there is a falut in the alignmentbuffer checksum",
        "Pass/Fail Criteria": "Assertion Checks",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_instr_fetch_fusion",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Fault propegation (data)",
        "Feature Description": "If any data bus fetch associated with the execution of a load instruction, store instruction, pop - type instruction or push - type instruction has an associated parity/checksum error, then that load instruction, store instruction, pop - type instruction or push - type instruction shall have an associated parity/checksum error.",
        "Verification Goal": "Verify that it is generated a pending NMI if any valid data fetch has an integrity error",
        "Pass/Fail Criteria": "Assertion Check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_data_integrity_err_helper_assert, a_glitch_xsecure_integrity_data_integrity_err",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Register file update",
        "Feature Description": "Load instructions and pop - type instructions with parity/checksum errors shall still write the register file (in the same way as if no parity/checksum error happened).",
        "Verification Goal": "Verify that the register file is updated even though there is an integrity fault",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_integrity_update_register_parity_checksum_error. COV: c_glitch_xsecure_integrity_update_register_parity_checksum_error",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Major alert (integrity)",
        "Feature Description": "Non - associated instruction or data interface integrity ( parity/checksum ) error sets major alert",
        "Verification Goal": "Verify that major alert is set if there is an instruction or data interface integrity fault ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_data_gnt_parity, a_glitch_xsecure_integrity_instr_gnt_parity, a_glitch_xsecure_integrity_data_rvalid_parity, a_glitch_xsecure_integrity_instr_rvalid_parity",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Major alert (instruction)",
        "Feature Description": "Instruction parity/checksum fault ( i.e. when triggering the related exception) sets major alert. ",
        "Verification Goal": "Verify that instruction parity/checksum fault ( i.e. when triggering the related exception) sets major alert. ",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_instr_integrity_error",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Major alert (data)",
        "Feature Description": "Store/load parity/checksum fault NMI ( i.e. when triggering the related NMI) sets major alert",
        "Verification Goal": "Verify that store/load parity/checksum fault NMI ( i.e. when triggering the related NMI) sets major alert",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_data_integrity_err",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Instruction exception code",
        "Feature Description": "An attempt to execute an instruction with an associated integrity error shall cause an instruction parity/checksum fault exception (exception code 0x19).",
        "Verification Goal": "Verify that an attempt to execute an instruction with an associated integrity error shall cause an instruction parity/checksum fault exception (exception code 0x19).",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_instr_integrity_error",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Interface Integrity",
        "Sub Feature": "Data exception code",
        "Feature Description": "A load/store access with an associated integrity error shall cause a load parity/checksum fault NMI (exception code 0x402/0x403).",
        "Verification Goal": "Verify that a load/store access with an associated integrity error shall cause a load parity/checksum fault NMI (exception code 0x402/0x403).",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Directed Self-Checking",
        "Coverage Method": "Functional coverage",
        "Link to Coverage": "A: a_glitch_xsecure_integrity_data_integrity_err_helper_assert, a_glitch_xsecure_integrity_data_integrity_err. COV:c_glitch_xsecure_security_parity_checksum_fault_NMI_load_instruction, c_glitch_xsecure_security_parity_checksum_fault_NMI_store_instruction",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Bus Protocol Hardening",
        "Sub Feature": "Interface violation of the OBI busses",
        "Feature Description": "Verify that OBI protocol is followed, or if there is a violation alert major is set.",
        "Verification Goal": "Verify that the OBI protocol is followed, but if not, alert major is set",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_bus_hardening_no_outstanding_obi_instr_trans, a_xsecure_bus_hardening_no_outstanding_obi_data_trans, a_glitch_xsecure_bus_hardening_no_outstanding_obi_instr_trans, a_glitch_xsecure_bus_hardening_no_outstanding_obi_data_trans",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Bus Protocol Hardening",
        "Sub Feature": "Interface between MPU and alignment buffer",
        "Feature Description": "Verify that OBI protocol is followed, or if there is a violation alert major is set.",
        "Verification Goal": "Verify that the OBI protocol is followed, but if not, alert major is set",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_bus_hardening_alignment_buff_receive_instr_if_mpu_resp, a_glitch_xsecure_bus_hardening_alignment_buff_receive_instr_if_mpu_resp",
        "": ""
    },
    {
        "Requirement Location": "A: ",
        "Feature": "Bus Protocol Hardening",
        "Sub Feature": "Interface between load store unit MPU and load store unit",
        "Feature Description": "Verify that OBI protocol is followed, or if there is a violation alert major is set.",
        "Verification Goal": "Verify that the OBI protocol is followed, but if not, alert major is set",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_bus_hardening_lsu_receive_lsu_mpu_resp, a_glitch_xsecure_bus_hardening_lsu_receive_lsu_mpu_resp",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Bus Protocol Hardening",
        "Sub Feature": "Core side memory transaction counter in the load-store unit response filter",
        "Feature Description": "The counter should not underflow, but if it does, alert major is set",
        "Verification Goal": "Verify that the counter should not underflow, but if it does, alert major is set",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_bus_hardening_core_side_cnt, a_glitch_xsecure_bus_hardening_core_side_cnt_underflows",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Bus Protocol Hardening",
        "Sub Feature": "Bus side memory transaction counter in the load-store unit response filter",
        "Feature Description": "The counter should not underflow, but if it does, alert major is set",
        "Verification Goal": "Verify that the counter should not underflow, but if it does, alert major is set",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random and Directed Self-Checking",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_bus_hardening_bus_side_cnt, a_glitch_xsecure_bus_hardening_bus_side_cnt_underflows",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "CSRs to decode as illegal",
        "Feature Description": "The following CSRs shall decode as illegal: cycle, instret, cycleh, instreth, hpmcounter3-31, hpmcounterh3-31",
        "Verification Goal": "Verify any instruction attempting to read or write these registers decode as illegal",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "N/A",
        "Link to Coverage": "DTC: csr_should_not_be_present",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "CSRs to be hardwired to 0x0",
        "Feature Description": "The following CSRs shall be hardwired to 0x0: mhpmcounteren3-31, mhpmcounterh3-31, mhpevent3-31",
        "Verification Goal": "Assert these registers are always 0",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_reduced_profiling_mhpmevent, a_xsecure_reduced_profiling_mhpmcounter",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "CSR present",
        "Feature Description": "mcountereren CSR shall be present WARL (0x0)",
        "Verification Goal": "Verify that mcounteren CSR is present and WARL",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "N/A",
        "Link to Coverage": "DTC: csr_should_be_present",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "CSR present",
        "Feature Description": "mcycle, minstret, mcycleh and minstreth CSRs are present",
        "Verification Goal": "Verify that CSRs mcycle, minstret, mcycleh and minstreth are present",
        "Pass/Fail Criteria": "Check against RM",
        "Test Type": "Directed Non-Self-Checking",
        "Coverage Method": "N/A",
        "Link to Coverage": "DTC: csr_should_be_present",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "CSR bits ardwired to 0",
        "Feature Description": "Bits 1 and 3-31 of the mcountinhibit CSR shall be hardwired to 0",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "Assertion check",
        "Test Type": "Constrained-Random",
        "Coverage Method": "Assertion Coverage",
        "Link to Coverage": "A: a_xsecure_reduced_profiling_mcountinhibit",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    },
    {
        "Requirement Location": "",
        "Feature": "Reduction of profiling infrastructure",
        "Sub Feature": "",
        "Feature Description": "",
        "Verification Goal": "Verify that every bit of CSR mcountinhibit, except bit nr. 1 and 2, are hardwired to 0",
        "Pass/Fail Criteria": "",
        "Test Type": "",
        "Coverage Method": "",
        "Link to Coverage": "",
        "": ""
    }
]